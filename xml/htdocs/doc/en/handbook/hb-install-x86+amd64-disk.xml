<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/hb-install-x86+amd64-disk.xml,v 1.23 2013/04/11 18:25:12 swift Exp $ -->

<sections>

<abstract>
To be able to install Gentoo, you must create the necessary partitions.
This chapter describes how to partition a disk for future usage.
</abstract>

<version>16</version>
<date>2013-04-11</date>

<section>
<title>Introduction to Block Devices</title>

<subsection>
<include href="hb-install-blockdevices.xml"/>
</subsection>

<subsection>
<title>Partitions</title>
<body>

<p>
Although it is theoretically possible to use a full disk to house your Linux
system, this is almost never done in practice. Instead, full disk block devices
are split up in smaller, more manageable block devices. On <keyval id="arch"/>
systems, these are called <e>partitions</e>. 
</p>

<p>
Partitions are divided in three types:
<e>primary</e>, <e>extended</e> and <e>logical</e>.
</p>

<p>
A <e>primary</e> partition is a partition which has its information stored in
the MBR (master boot record). As an MBR is very small (512 bytes) only four
primary partitions can be defined (for instance, <path>/dev/sda1</path> to
<path>/dev/sda4</path>).
</p>

<p>
An <e>extended</e> partition is a special primary partition (meaning the
extended partition must be one of the four possible primary partitions) which
contains more partitions. Such a partition didn't exist originally, but as
four partitions were too few, it was brought to life to extend the formatting
scheme without losing backward compatibility.
</p>

<p>
A <e>logical</e> partition is a partition inside the extended partition. Their
definitions aren't placed inside the MBR, but are declared inside the extended
partition. 
</p>

</body>
</subsection>
<subsection>
<title>Advanced Storage</title>
<body>

<p>
The <keyval id="arch"/> Installation CDs provide support for LVM2.
LVM2 increases the flexibility offered by your partitioning setup.
During the installation instructions, we will focus on "regular" partitions,
but it is still good to know LVM2 is supported as well.
</p>

</body>
</subsection>
</section>
<section>
<title>Designing a Partitioning Scheme</title>
<subsection>
<title>Default Partitioning Scheme</title>
<body>

<p>
If you are not interested in drawing up a partitioning scheme for your system,
you can use the partitioning scheme we use throughout this book:
</p>

<table>
<tr>
  <th>Partition</th>
  <th>Filesystem</th>
  <th>Size</th>
  <th>Description</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>ext2</ti>
  <ti>32M</ti>
  <ti>Boot partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>(swap)</ti>
  <ti>512M</ti>
  <ti>Swap partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>ext4</ti>
  <ti>Rest of the disk</ti>
  <ti>Root partition</ti>
</tr>
</table>

<p>
If you are interested in knowing how big a partition should be, or even how 
many partitions you need, read on. Otherwise continue now with partitioning 
your disk by reading <uri link="#fdisk">Using fdisk to Partition your
Disk</uri> or <uri link="#parted">Using parted to Partition your Disk</uri>
(both are partitioning tools, <c>fdisk</c> is well known and stable,
<c>parted</c> is a bit more recent but supports partitions larger than
2TB).
</p>

</body>
</subsection>
<subsection>
<title>How Many and How Big?</title>
<body>

<p>
The number of partitions is highly dependent on your environment. For instance,
if you have lots of users, you will most likely want to have your
<path>/home</path> separate as it increases security and makes backups easier.
If you are installing Gentoo to perform as a mailserver, your 
<path>/var</path> should be separate as all mails are stored inside 
<path>/var</path>. A good choice of filesystem will then maximise your 
performance. Gameservers will have a separate <path>/opt</path> as most gaming 
servers are installed there. The reason is similar for <path>/home</path>: 
security and backups. You will definitely want to keep <path>/usr</path> big:
not only will it contain the majority of applications, the Portage tree alone
takes around 500 Mbyte excluding the various sources that are stored in it.
</p>

<p>
As you can see, it very much depends on what you want to achieve. Separate
partitions or volumes have the following advantages:
</p>

<ul>
<li>
  You can choose the best performing filesystem for each partition or volume
</li>
<li>
  Your entire system cannot run out of free space if one defunct tool is
  continuously writing files to a partition or volume
</li>
<li>
  If necessary, file system checks are reduced in time, as multiple checks can
  be done in parallel (although this advantage is more with multiple disks than
  it is with multiple partitions)
</li>
<li>
  Security can be enhanced by mounting some partitions or volumes read-only, 
  nosuid (setuid bits are ignored), noexec (executable bits are ignored) etc.
</li>
</ul>

<p>
However, multiple partitions have disadvantages as well. If not configured
properly, you will have a system with lots of free space on one partition and
none on another. Another nuisance is that separate partitions - especially
for important mountpoints like <path>/usr</path> or <path>/var</path> - often
require the administrator to boot with an initramfs to mount the partition
before other boot scripts start. This isn't always the case though, so your
results may vary.
</p>

<p>
There is also a 15-partition limit for SCSI and SATA unless you use GPT
labels.
</p>

<p>
As an example partitioning, we show you one for a 20GB disk, used as a
demonstration laptop (containing webserver, mailserver, gnome, ...):
</p>

<pre caption="Filesystem usage example">
$ <i>df -h</i>
Filesystem    Type    Size  Used Avail Use% Mounted on
/dev/sda5     ext4    509M  132M  351M  28% /
/dev/sda2     ext4    5.0G  3.0G  1.8G  63% /home
/dev/sda7     ext4    7.9G  6.2G  1.3G  83% /usr
/dev/sda8     ext4   1011M  483M  477M  51% /opt
/dev/sda9     ext4    2.0G  607M  1.3G  32% /var
/dev/sda1     ext2     51M   17M   31M  36% /boot
/dev/sda6     swap    516M   12M  504M   2% &lt;not mounted&gt;
<comment>(Unpartitioned space for future usage: 2 GB)</comment>
</pre>

<p>
<path>/usr</path> is rather full (83% used) here, but once
all software is installed, <path>/usr</path> doesn't tend to grow that much.
Although allocating a few gigabytes of disk space for <path>/var</path> may
seem excessive, remember that Portage uses this partition by default for
compiling packages. If you want to keep <path>/var</path> at a more reasonable
size, such as 1GB, you will need to alter your <c>PORTAGE_TMPDIR</c> variable
in <path>/etc/portage/make.conf</path> to point to the partition with enough
free space for compiling extremely large packages such as OpenOffice.
</p>

</body>
</subsection>
</section>
<section id="fdisk">
<title>Using fdisk to Partition your Disk</title>
<subsection>
<body>

<impo>
If your environment will deal with partitions larger than 2 TB, please
use the <uri link="#parted">Using parted to Partition your Disk</uri>
instructions instead. <c>fdisk</c> is not able to deal with larger
partitions.
</impo>

<p>
The following parts explain how to create the example partition layout 
using <c>fdisk</c>. The example partition layout was mentioned earlier:
</p>

<table>
<tr>
  <th>Partition</th>
  <th>Description</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>Boot partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>Swap partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>Root partition</ti>
</tr>
</table>

<p>
Change your partition layout according to your own preference.
</p>

</body>
</subsection>
<subsection>
<title>Viewing the Current Partition Layout</title>
<body>

<p>
<c>fdisk</c> is a popular and powerful tool to split your disk into partitions.
Fire up <c>fdisk</c> on your disk (in our example, we use
<path>/dev/sda</path>):
</p>

<pre caption="Starting fdisk">
# <i>fdisk /dev/sda</i>
</pre>

<p>
Once in <c>fdisk</c>, you'll be greeted with a prompt that looks like this:
</p>

<pre caption="fdisk prompt">
Command (m for help): 
</pre>

<p>
Type <c>p</c> to display your disk's current partition configuration:
</p>

<pre caption="An example partition configuration">
Command (m for help): <i>p</i>

Disk /dev/sda: 240 heads, 63 sectors, 2184 cylinders
Units = cylinders of 15120 * 512 bytes

   Device Boot    Start       End    Blocks   Id  System
/dev/sda1   *         1        14    105808+  83  Linux
/dev/sda2            15        49    264600   82  Linux swap
/dev/sda3            50        70    158760   83  Linux
/dev/sda4            71      2184  15981840    5  Extended
/dev/sda5            71       209   1050808+  83  Linux
/dev/sda6           210       348   1050808+  83  Linux
/dev/sda7           349       626   2101648+  83  Linux
/dev/sda8           627       904   2101648+  83  Linux
/dev/sda9           905      2184   9676768+  83  Linux

Command (m for help): 
</pre>

<p>
This particular disk is configured to house seven Linux filesystems (each with
a corresponding partition listed as "Linux") as well as a swap partition
(listed as "Linux swap"). 
</p>

</body>
</subsection>
<subsection>
<title>Removing all Partitions</title>
<body>

<p>
We will first remove all existing partitions from the disk. Type <c>d</c> to
delete a partition. For instance, to delete an existing <path>/dev/sda1</path>:
</p>

<pre caption="Deleting a partition">
Command (m for help): <i>d</i>
Partition number (1-4): <i>1</i>
</pre>

<p>
The partition has been scheduled for deletion. It will no longer show up if you
type <c>p</c>, but it will not be erased until your changes have been saved. If
you made a mistake and want to abort without saving your changes, type <c>q</c>
immediately and hit enter and your partition will not be deleted.
</p>

<p>
Now, assuming that you do indeed want to wipe out all the partitions on your
system, repeatedly type <c>p</c> to print out a partition listing and then type
<c>d</c> and the number of the partition to delete it. Eventually, you'll end 
up with a partition table with nothing in it:
</p>

<pre caption="An empty partition table">
Disk /dev/sda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System

Command (m for help):
</pre>

<p>
Now that the in-memory partition table is empty, we're ready to create the
partitions. We will use a default partitioning scheme as discussed previously.
Of course, don't follow these instructions to the letter if you don't want the
same partitioning scheme!
</p>

</body>
</subsection>
<subsection>
<title>Creating the Boot Partition</title>
<body>

<p>
We first create a small boot partition. Type <c>n</c> to create a new partition,
then <c>p</c> to select a primary partition, followed by <c>1</c> to select the
first primary partition. When prompted for the first cylinder, hit enter. When
prompted for the last cylinder, type <c>+32M</c> to create a partition 32 Mbyte
in size:
</p>

<pre caption="Creating the boot partition">
Command (m for help): <i>n</i>
Command action
  e   extended
  p   primary partition (1-4)
<i>p</i>
Partition number (1-4): <i>1</i>
First cylinder (1-3876, default 1): <comment>(Hit Enter)</comment>
Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-3876, default 3876): <i>+32M</i>
</pre>

<p>
Now, when you type <c>p</c>, you should see the following partition printout:
</p>

<pre caption="Created boot partition">
Command (m for help): <i>p</i>

Disk /dev/sda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

   Device Boot    Start       End    Blocks   Id  System
/dev/sda1             1        14    105808+  83  Linux
</pre>

<p>
We need to make this partition bootable. Type <c>a</c> to toggle the bootable
flag on a partition and select <c>1</c>. If you press <c>p</c> again, you will
notice that an <e>*</e> is placed in the "Boot" column.
</p>

</body>
</subsection>
<subsection>
<title>Creating the Swap Partition</title>
<body>

<p>
Let's now create the swap partition. To do this, type <c>n</c> to create a new 
partition, then <c>p</c> to tell fdisk that you want a primary partition. Then 
type <c>2</c> to create the second primary partition, <path>/dev/sda2</path> in
our case. When prompted for the first cylinder, hit enter. When prompted for 
the last cylinder, type <c>+512M</c> to create a partition 512MB in size. After
you've done this, type <c>t</c> to set the partition type, <c>2</c> to select 
the partition you just created and then type in <c>82</c> to set the partition 
type to "Linux Swap". After completing these steps, typing <c>p</c> should
display a partition table that looks similar to this:
</p>

<pre caption="Partition listing after creating a swap partition">
Command (m for help): <i>p</i>

Disk /dev/sda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

   Device Boot    Start       End    Blocks   Id  System
/dev/sda1   *         1        14    105808+  83  Linux
/dev/sda2            15        81    506520   82  Linux swap
</pre>

</body>
</subsection>
<subsection>
<title>Creating the Root Partition</title>
<body>

<p>
Finally, let's create the root partition. To do this, type <c>n</c> to create a 
new partition, then <c>p</c> to tell fdisk that you want a primary partition. 
Then type <c>3</c> to create the third primary partition, <path>/dev/sda3</path>
in our case. When prompted for the first cylinder, hit enter. When prompted for
the last cylinder, hit enter to create a partition that takes up the rest of the
remaining space on your disk. After completing these steps, typing <c>p</c> 
should display a partition table that looks similar to this:
</p>

<pre caption="Partition listing after creating the root partition">
Command (m for help): <i>p</i>

Disk /dev/sda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

   Device Boot    Start       End    Blocks   Id  System
/dev/sda1   *         1        14    105808+  83  Linux
/dev/sda2            15        81    506520   82  Linux swap
/dev/sda3            82      3876  28690200   83  Linux
</pre>

</body>
</subsection>
<subsection>
<title>Saving the Partition Layout</title>
<body>

<p>
To save the partition layout and exit <c>fdisk</c>, type <c>w</c>.
</p>

<pre caption="Save and exit fdisk">
Command (m for help): <i>w</i>
</pre>

<p>
Now that your partitions are created, you can continue with <uri
link="#filesystems">Creating Filesystems</uri>.
</p>

</body>
</subsection>
</section>
<section id="parted">
<title>Using parted to Partition your Disk</title>
<subsection>
<body>

<p>
In this chapter, we guide you through the creation of the example partition
layout mentioned earlier in the instructions. Unlike the previous chapter, we
describe the method using the <c>parted</c> application instead. Both
<c>parted</c> and <c>fdisk</c> offer the same functions, so if you partitioned
your system using <c>fdisk</c> already, you can skip this section and continue
with <uri link="#filesystems">Creating Filesystems</uri>.
</p>

<p>
The example partition layout we use is shown in the next table:
</p>

<table>
<tr>
  <th>Partition</th>
  <th>Description</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>Boot partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>Swap partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>Root partition</ti>
</tr>
</table>

<p>
Change your partition layout according to your own preference.
</p>

</body>
</subsection>
<subsection>
<title>Viewing the Current Partition Layout</title>
<body>

<p>
The <c>parted</c> application is a somewhat more modern variant of
<c>fdisk</c>. It offers a simpler interface for partitioning your disks and
supports very large partitions (more than 2 TB). Fire up <c>parted</c> on your
disk (in our example, we use <path>/dev/sda</path>):
</p>

<pre caption="Starting parted">
# <i>parted /dev/sda</i>
GNU Parted 2.3
Using /dev/vda
Welcome to GNU Parted! Type 'help' to view a list of commands.
</pre>

<p>
To find out about all options supported by <c>parted</c>, type <c>help</c> and
press return. For now, we just continue by asking <c>parted</c> to show the
partitions currently in use on the selected disk. The <c>print</c> command can
be used for that.
</p>

<pre caption="An example partition configuration shown by parted">
(parted) <i>print</i>
Model: SCSI Block Device
Disk /dev/sda: 21.5GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos

Number  Start   End     Size    Type     File system     Flags
 1      512B    2148MB  2148MB  primary  ext4
 2      2148MB  3222MB  1074MB  primary  linux-swap(v1)
 3      3222MB  21.5GB  18.3GB  primary                  lvm
</pre>

</body>
</subsection>
<subsection>
<title>Optional: Setting the GPT Label</title>
<body>

<p>
Most disks on x86/amd64 are prepared using an <e>msdos</e> label. However, if
you plan on creating huge partitions (2 TB and more), you must use a <e>gpt</e>
label (the <e>GUID Partition Type</e>) for your disk. Using <c>parted</c>, this
can be accomplished with <c>mklabel gpt</c>:
</p>

<warn>
Changing the partition type will remove all partitions from your disk. All data
on the disk will be lost.
</warn>

<pre caption="Setting the GPT label">
(parted) <i>mklabel gpt</i>
</pre>

</body>
</subsection>
<subsection>
<title>Removing all Partitions</title>
<body>

<p>
If this isn't done yet (for instance through the <c>mklabel</c> operation
earlier, or because the disk is a freshly formatted one), we will first
remove all existing partitions from the disk. Type <c>rm &lt;number&gt;</c>
where &lt;number&gt; is the partition you want to remove.
</p>

<pre caption="Removing a partition from the disk">
(parted) <i>rm 2</i>
</pre>

<p>
Do the same for all other partitions that you don't need. However, make sure you
do not make any mistakes here - <c>parted</c> executes the changes immediate
(unlike <c>fdisk</c> which stages them, allowing a user to "undo" his changes
before saving or exiting <c>fdisk</c>).
</p>

</body>
</subsection>
<subsection>
<title>Creating the Partitions</title>
<body>

<p>
Now let's create the partitions we mentioned earlier. Creating partitions with
<c>parted</c> isn't very difficult - all we need to do is inform <c>parted</c>
about the following settings:
</p>

<ul>
  <li>
    The <e>partition type</e> to use. This usually is <e>primary</e> in case you
    are not going to have more than 4 partitions (with the <e>msdos</e>
    partition label). Otherwise, you will need to make your fourth partition an
    <e>extended</e> one which hosts the rest of the disk, and create
    <e>logical</e> partitions inside it. If you use a <e>gpt</e>-labeled
    partition, then there is no limit on the number of primary partitions.
  </li>
  <li>
    The <e>file system type</e> to use. The <c>parted</c> application supports
    most common file systems and knows which kind of partition ID it needs to
    use for these partitions. This does <e>not</e> mean that <c>parted</c> will
    create a file system on the partition (you can with the <c>mkpartfs</c>
    command, but we'll use the regular <c>mkfs.*</c> commands later for this
    purpose). The partition ID is often used by auto-detection tools to know
    what to do with a particular partition.
  </li>
  <li>
    The start location of a partition (which can be expressed in MB or GB)
  </li>
  <li>
    The end location of the partition (which can be expressed in MB or GB)
  </li>
</ul>

<p>
One advantage of <c>parted</c> is that you can easily just use the partition
sizes to automatically find the correct start and end location as you will see
in the next example.
</p>

<pre caption="Creating the partitions">
<comment># Create a 32 mbyte /boot partition</comment>
(parted) <i>mkpart primary ext2 0 32mb</i>
Warning: The resulting partition is not properly aligned for best performance.
Ignore/Cancel? <i>i</i>

<comment># Create a 512 mbyte swap partition</comment>
(parted) <i>mkpart primary linux-swap 32mb 544mb</i>

<comment># Create a partition that spans the remaining disk.
# -1s (minus one s) means the end of the disk</comment>
(parted) <i>mkpart primary ext4 544mb -1s</i>
Warning: You requested a partition from 544MB to 21.5GB.
The closest location we can manage is 544MB to 21.5GB.
Is this still acceptable to you?
Yes/No? <i>y</i>
</pre>

<p>
You can now <c>print</c> the partition layout again to validate if everything is
as expected. When you are satisfied, use the <c>quit</c> command to exit
<c>parted</c>.
</p>

</body>
</subsection>
</section>
<section id="filesystems">
<title>Creating Filesystems</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Now that your partitions are created, it is time to place a filesystem on them. 
If you don't care about what filesystem to choose and are happy with what we use
as default in this handbook, continue with <uri 
link="#filesystems-apply">Applying a Filesystem to a Partition</uri>.
Otherwise read on to learn about the available filesystems...
</p>

</body>
</subsection>

<subsection>
<include href="hb-install-filesystems.xml"/>
</subsection>

<subsection id="filesystems-apply">
<title>Applying a Filesystem to a Partition</title>
<body>

<p>
To create a filesystem on a partition or volume, there are tools available for 
each possible filesystem:
</p>

<table>
<tr>
  <th>Filesystem</th>
  <th>Creation Command</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mkfs.ext2</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mkfs.ext3</c></ti>
</tr>
<tr>
  <ti>ext4</ti>
  <ti><c>mkfs.ext4</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
For instance, to have the boot partition (<path>/dev/sda1</path> in our
example) in ext2 and the root partition (<path>/dev/sda3</path> in our example)
in ext4 (as in our example), you would use:
</p>

<pre caption="Applying a filesystem on a partition">
# <i>mkfs.ext2 /dev/sda1</i>
# <i>mkfs.ext4 /dev/sda3</i>
</pre>

<p>
Now create the filesystems on your newly created partitions (or logical
volumes).
</p>

</body>
</subsection>
<subsection>
<title>Activating the Swap Partition</title>
<body>

<p>
<c>mkswap</c> is the command that is used to initialize swap partitions:
</p>

<pre caption="Creating a Swap signature">
# <i>mkswap /dev/sda2</i>
</pre>

<p>
To activate the swap partition, use <c>swapon</c>:
</p>

<pre caption="Activating the swap partition">
# <i>swapon /dev/sda2</i>
</pre>

<p>
Create and activate the swap with the commands mentioned above.
</p>

</body>
</subsection>
</section>
<section>
<title>Mounting</title>
<body>

<p>
Now that your partitions are initialized and are housing a filesystem, it is
time to mount those partitions. Use the <c>mount</c> command. Don't forget to
create the necessary mount directories for every partition you created. As an
example we mount the root and boot partition:
</p>

<pre caption="Mounting partitions">
# <i>mount /dev/sda3 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/sda1 /mnt/gentoo/boot</i>
</pre>

<note>
If you want your <path>/tmp</path> to reside on a separate partition, be sure to
change its permissions after mounting: <c>chmod 1777 /mnt/gentoo/tmp</c>. This
also holds for <path>/var/tmp</path>.
</note>

<p>
We will also have to mount the proc filesystem (a virtual interface with the 
kernel) on <path>/proc</path>. But first we will need to place our files on the partitions.
</p>

<p>
Continue with <uri link="?part=1&amp;chap=5">Installing the Gentoo
Installation Files</uri>.
</p>

</body>
</section>
</sections>
