<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/hb-install-x86+amd64-disk.xml,v 1.40 2014/01/23 19:43:16 swift Exp $ -->

<sections>

<abstract>
To be able to install Gentoo, you must create the necessary partitions.
This chapter describes how to partition a disk for future usage.
</abstract>

<version>32</version>
<date>2014-01-23</date>

<section>
<title>Introduction to Block Devices</title>

<subsection>
<include href="hb-install-blockdevices.xml"/>
</subsection>

<subsection>
<title>Partitions</title>
<body>

<p>
Although it is theoretically possible to use a full disk to house your Linux
system, this is almost never done in practice. Instead, full disk block devices
are split up in smaller, more manageable block devices. On <keyval id="arch"/>
systems, these are called <e>partitions</e>. There are currently two standard
partitioning technologies in use: MBR and GPT.
</p>

<p>
The <e>MBR (Master Boot Record)</e> setup uses 32-bit identifiers for
the start sector and length of the partitions, and supports three partition
types: <e>primary</e>, 
<e>extended</e> and <e>logical</e>. Primary partitions have their information
stored in the master boot record itself - a very small (usually 512 bytes)
location at the very beginning of a disk. Due to this small space, only four
primary partitions are supported (for instance, <path>/dev/sda1</path> to
<path>/dev/sda4</path>).
</p>

<p>
To support more partitions, one of the primary partitions can be marked as an
extended partition. This partition can then contain logical partitions
(partitions within a partition).
</p>

<p>
Each partition is limited to 2 TB in size (due to the 32-bit identifiers).
Also, the MBR setup does not provide any backup-MBR, so if an application
or user overwrites the MBR, all partition information is lost.
</p>


<p>
The <e>GPT (GUID Partition table)</e> setup uses 64-bit identifiers for
the partitions. The location in which it stores the partition information
is also much bigger than the 512 bytes of an MBR, and there is no limit on
the amount of partitions. Also the size of a partition is bounded by a much
greater limit (almost 8 ZB - yes, zettabytes).
</p>

<p>
When a system's software interface between the operating system and firmware
is UEFI (instead of BIOS), GPT is almost mandatory as compatibility issues will
arise with MBR here.
</p>

<p>
GPT also has the advantage that it has a backup GPT at the end of the disk,
which can be used to recover damage of the primary GPT at the beginning. GPT
also carries CRC32 checksums to detect errors in the header and partition
tables.
</p>

</body>
</subsection>
<subsection id="gpt_or_mbr">
<title>So, GPT or MBR?</title>
<body>

<p>
From the description above, one might think that using GPT should always be the
recommended approach. But there are a few caveats with this.
</p>

<p>
Using GPT on a BIOS-based computer works, but you cannot dual-boot then with a
Microsoft Windows operating system. The reason is that Microsoft Windows will
boot in EFI mode if it detects a GPT partition label.
</p>

<p>
Some buggy BIOSes or EFIs configured to boot in BIOS/CSM/legacy mode might also
have problems with booting from GPT labeled disks. If that is the case, you 
might be able to work around the problem by adding the boot/active flag on the
protective MBR partition which has to be done through <c>fdisk</c>
(<c>parted</c> understands the GPT tables and would not show the protective
MBR partition):
</p>

<pre caption="Enabling boot flag on protective MBR">
# <i>fdisk /dev/sda</i>
WARNING: GPT (GUID Partition Table) detected on '/dev/sda'! The util fdisk
doesn't support GPT. Use GNU Parted.

Command (m for help): <i>a</i>
Partition number (1-4): <i>1</i>

Command (m for help): <i>w</i>
</pre>

</body>
</subsection>
<subsection>
<title>Advanced Storage</title>
<body>

<p>
The <keyval id="arch"/> Installation CDs provide support for LVM2.
LVM2 increases the flexibility offered by your partitioning setup.
During the installation instructions, we will focus on "regular" partitions,
but it is still good to know LVM2 is supported as well.
</p>

</body>
</subsection>
</section>
<section>
<title>Designing a Partitioning Scheme</title>
<subsection>
<title>Default Partitioning Scheme</title>
<body>

<p>
If you are not interested in drawing up a partitioning scheme for your system,
you can use the partitioning scheme we use throughout this book.
</p>

<table>
<tr>
  <th>Partition</th>
  <th>Filesystem</th>
  <th>Size</th>
  <th>Description</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>(bootloader)</ti>
  <ti>2M</ti>
  <ti>BIOS boot partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>ext2</ti>
  <ti>128M</ti>
  <ti>Boot partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>(swap)</ti>
  <ti>512M or higher</ti>
  <ti>Swap partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda4</path></ti>
  <ti>ext4</ti>
  <ti>Rest of the disk</ti>
  <ti>Root partition</ti>
</tr>
</table>

<p>
If you are interested in knowing how big a partition should be, or even how 
many partitions you need, read on. Otherwise continue now with partitioning 
your disk by reading <uri link="#parted">Default: Using parted to Partition
your Disk</uri> (or <uri link="#fdisk">Alternative: Using fdisk to Partition
your Disk</uri>). Both are partitioning tools, <c>fdisk</c> is well known and stable,
<c>parted</c> is a bit more recent but supports partitions larger than
2TB).
</p>

</body>
</subsection>
<subsection>
<title>How Many and How Big?</title>
<body>

<p>
The number of partitions is highly dependent on your environment. For instance,
if you have lots of users, you will most likely want to have your
<path>/home</path> separate as it increases security and makes backups easier.
If you are installing Gentoo to perform as a mailserver, your 
<path>/var</path> should be separate as all mails are stored inside 
<path>/var</path>. A good choice of filesystem will then maximise your 
performance. Gameservers will have a separate <path>/opt</path> as most gaming 
servers are installed there. The reason is similar for <path>/home</path>: 
security and backups. You will definitely want to keep <path>/usr</path> big:
not only will it contain the majority of applications, the Portage tree alone
takes around 500 Mbyte excluding the various sources that are stored in it.
</p>

<p>
As you can see, it very much depends on what you want to achieve. Separate
partitions or volumes have the following advantages:
</p>

<ul>
<li>
  You can choose the best performing filesystem for each partition or volume
</li>
<li>
  Your entire system cannot run out of free space if one defunct tool is
  continuously writing files to a partition or volume
</li>
<li>
  If necessary, file system checks are reduced in time, as multiple checks can
  be done in parallel (although this advantage is more with multiple disks than
  it is with multiple partitions)
</li>
<li>
  Security can be enhanced by mounting some partitions or volumes read-only, 
  nosuid (setuid bits are ignored), noexec (executable bits are ignored) etc.
</li>
</ul>

<p>
However, multiple partitions have disadvantages as well. If not configured
properly, you will have a system with lots of free space on one partition and
none on another. Another nuisance is that separate partitions - especially
for important mountpoints like <path>/usr</path> or <path>/var</path> - often
require the administrator to boot with an initramfs to mount the partition
before other boot scripts start. This isn't always the case though, so your
results may vary.
</p>

<p>
There is also a 15-partition limit for SCSI and SATA unless you use GPT
labels.
</p>

</body>
</subsection>
<subsection>
<title>What about swap space?</title>
<body>

<p>
There is no perfect value for the swap partition. The purpose of swap space is
to provide disk storage to the kernel when internal memory (RAM) is under
pressure. A swap space allows for the kernel to move memory pages that are
not likely to be accessed soon to disk (swap or page-out), freeing memory. Of
course, if that memory is suddenly needed, these pages need to be put back in
memory (page-in) which will take a while (as disks are very slow compared to
internal memory).
</p>

<p>
If you are not going to run memory intensive applications or you have lots of
memory available, then you probably do not need much swap space. However, swap
space is also used to store the entire memory in case of hibernation. If you
plan on using hibernation, you will need a bigger swap space, often at least
the amount of memory you have in your system.
</p>

</body>
</subsection>
<subsection>
<title>What is the BIOS boot partition?</title>
<body>

<p>
A BIOS boot partition is a very small (1 to 2 MB) partition in which
bootloaders like GRUB2 can put additional data that doesn't fit in the
allocated storage (a few hundred bytes in case of MBR) and cannot place
elsewhere.
</p>

<p>
Such partitions are not always necessary, but considering the low space
consumption and the difficulties we would have with documenting the plethora
of partitioning differences otherwise, it is recommended to create it in
either case.
</p>

<p>
For completeness, we can say that the BIOS boot partition is needed when
GPT partition layout is used with GRUB2, or when the MBR partition layout
is used with GRUB2 when the first partition starts earlier than the 1 MB
location on the disk.
</p>

</body>
</subsection>
</section>
<section id="parted">
<title>Default: Using parted to Partition your Disk</title>
<subsection>
<body>

<p>
In this chapter, we guide you through the creation of the example partition
layout mentioned earlier in the instructions, but repeat here again for
your convenience:
</p>

<table>
<tr>
  <th>Partition</th>
  <th>Description</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>BIOS boot partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>Boot partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>Swap partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda4</path></ti>
  <ti>Root partition</ti>
</tr>
</table>

<p>
Change your partition layout according to your own preference.
</p>

</body>
</subsection>
<subsection>
<title>Viewing the Current Partition Layout</title>
<body>

<p>
The <c>parted</c> application offers a simple interface for partitioning your
disks and supports very large partitions (more than 2 TB). Fire up
<c>parted</c> on your disk (in our example, we use <path>/dev/sda</path>).
We will ask <c>parted</c> to use optimum alignment:
</p>

<pre caption="Starting parted">
# <i>parted -a optimal /dev/sda</i>
GNU Parted 2.3
Using /dev/sda
Welcome to GNU Parted! Type 'help' to view a list of commands.
</pre>

<p>
Alignment means that partitions are started on well-known boundaries within
the disk, ensuring that operations on the disk from the operating system level
(retrieve pages from the disk) use the least amount of internal disk
operations. Misaligned partitions might require the disk to fetch two pages
instead of one even if the operating system asked for a single page.
</p>

<p>
To find out about all options supported by <c>parted</c>, type <c>help</c> and
press return.
</p>

</body>
</subsection>
<subsection>
<title>Setting the GPT Label</title>
<body>

<p>
Most disks on x86/amd64 are prepared using an <e>msdos</e> label. Using
<c>parted</c>, we can put a GPT label on the disk using <c>mklabel gpt</c>:
</p>

<warn>
Changing the partition type will remove all partitions from your disk. All data
on the disk will be lost.
</warn>

<pre caption="Setting the GPT label">
(parted) <i>mklabel gpt</i>
</pre>

<p>
If you want the disk to have MBR layout, use <c>mklabel msdos</c>.
</p>

</body>
</subsection>
<subsection>
<title>Removing all Partitions</title>
<body>

<p>
If this isn't done yet (for instance through the <c>mklabel</c> operation
earlier, or because the disk is a freshly formatted one), we will first
remove all existing partitions from the disk. Type <c>print</c> to view the
current partitions, and <c>rm &lt;number&gt;</c> where &lt;number&gt; is the
partition you want to remove.
</p>

<pre caption="Removing a partition from the disk">
(parted) <i>rm 2</i>
</pre>

<p>
Do the same for all other partitions that you don't need. However, make sure you
do not make any mistakes here - <c>parted</c> executes the changes immediately
(unlike <c>fdisk</c> which stages them, allowing a user to "undo" his changes
before saving or exiting <c>fdisk</c>).
</p>

</body>
</subsection>
<subsection>
<title>Creating the Partitions</title>
<body>

<p>
Now let's create the partitions we mentioned earlier. Creating partitions with
<c>parted</c> isn't very difficult - all we need to do is inform <c>parted</c>
about the following settings:
</p>

<ul>
  <li>
    The <e>partition type</e> to use. This usually is <e>primary</e>.
    If you use the <e>msdos</e> partition label, keep in mind that you can have
    no more than 4 primary partitions. If you need more than 4 partitions, make
    a partition <e>extended</e> and create <e>logical</e> partitions inside it.
  </li>
  <li>
    The start location of a partition (which can be expressed in MB, GB, ...)
  </li>
  <li>
    The end location of the partition (which can be expressed in MB, GB, ...)
  </li>
</ul>

<p>
First, we tell <c>parted</c> that the size unit we work with is megabytes
(actually mebibytes, abbreviated as MiB which is the "standard" notation, but
we will use MB in the text throughout as it is much more common):
</p>

<pre caption="Using MiB units">
(parted) <i>unit mib</i>
</pre>

<p>
Now create a 2 MB partition that will be used by the GRUB2 bootloader later.
We use the <c>mkpart</c> command for this, and inform <c>parted</c> to start
from 1 MB and end at 3 MB (creating a partition of 2 MB in size).
</p>

<pre caption="Creating a 2 MB partition">
(parted) <i>mkpart primary 1 3</i>
(parted) <i>name 1 grub</i>
(parted) <i>set 1 bios_grub on</i>
(parted) <i>print</i>
Model: Virtio Block Device (virtblk)
Disk /dev/sda: 20480MiB
Sector size (logical/physical): 512B/512B
Partition Table: gpt

Number   Start      End      Size     File system  Name   Flags
 1       1.00MiB    3.00MiB  2.00MiB               grub   bios_grub
</pre>

<p>
Do the same for the boot partition (128 MB), swap partition (in the example,
512 MB) and the root partition that spans the remaining disk (for which the
end location is marked as <c>-1</c>, meaning the end of the disk minus one MB,
which is the farthest a partition can go).
</p>

<pre caption="Creating other partitions">
(parted) <i>mkpart primary 3 131</i>
(parted) <i>name 2 boot</i>
(parted) <i>mkpart primary 131 643</i>
(parted) <i>name 3 swap</i>
(parted) <i>mkpart primary 643 -1</i>
(parted) <i>name 4 rootfs</i>
</pre>

<p>
The end result looks like so:
</p>

<pre caption="Viewing the current partition layout">
(parted) <i>print</i>
Model: Virtio Block Device (virtblk)
Disk /dev/sda: 20480MiB
Sector size (logical/physical): 512B/512B
Partition Table: gpt

Number   Start      End      Size     File system  Name   Flags
 1       1.00MiB    3.00MiB  2.00MiB               grub   bios_grub
 2       3.00MiB    131MiB   128MiB                boot
 3       131MiB     643MiB   512MiB                swap
 4       643MiB     20479MiB 19836MiB              rootfs
</pre>

<p>
When you are satisfied, use the <c>quit</c> command to exit <c>parted</c>.
</p>

</body>
</subsection>
</section>
<section id="fdisk">
<title>Alternative: Using fdisk to Partition your Disk</title>
<subsection>
<body>

<impo>
If your environment will deal with partitions larger than 2 TB, please
use the <uri link="#parted">Default: Using parted to Partition your Disk</uri>
instructions instead. <c>fdisk</c> is not able to deal with larger
partitions. Fdisk will also use the MBR partition layout. Alternative fdisk
applications, like gdisk (which Gentoo provides through the gptfdisk package)
exist that do support GPT, but might not be included on the Gentoo installation
media.
</impo>

<p>
The following parts explain how to create the example partition layout 
using <c>fdisk</c>. The example partition layout was mentioned earlier:
</p>

<table>
<tr>
  <th>Partition</th>
  <th>Description</th>
</tr>
<tr>
  <ti><path>/dev/sda1</path></ti>
  <ti>BIOS boot partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda2</path></ti>
  <ti>Boot partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda3</path></ti>
  <ti>Swap partition</ti>
</tr>
<tr>
  <ti><path>/dev/sda4</path></ti>
  <ti>Root partition</ti>
</tr>
</table>

<p>
Change your partition layout according to your own preference.
</p>

</body>
</subsection>
<subsection>
<title>Viewing the Current Partition Layout</title>
<body>

<p>
<c>fdisk</c> is a popular and powerful tool to split your disk into partitions.
Fire up <c>fdisk</c> on your disk (in our example, we use
<path>/dev/sda</path>):
</p>

<pre caption="Starting fdisk">
# <i>fdisk /dev/sda</i>
</pre>

<p>
Once in <c>fdisk</c>, you'll be greeted with a prompt that looks like this:
</p>

<pre caption="fdisk prompt">
Command (m for help): 
</pre>

<p>
Type <c>p</c> to display your disk's current partition configuration:
</p>

<pre caption="An example partition configuration">
Command (m for help): <i>p</i>

Disk /dev/sda: 240 heads, 63 sectors, 2184 cylinders
Units = cylinders of 15120 * 512 bytes

   Device Boot    Start       End    Blocks   Id  System
/dev/sda1   *         1        14    105808+  83  Linux
/dev/sda2            15        49    264600   82  Linux swap
/dev/sda3            50        70    158760   83  Linux
/dev/sda4            71      2184  15981840    5  Extended
/dev/sda5            71       209   1050808+  83  Linux
/dev/sda6           210       348   1050808+  83  Linux
/dev/sda7           349       626   2101648+  83  Linux
/dev/sda8           627       904   2101648+  83  Linux
/dev/sda9           905      2184   9676768+  83  Linux

Command (m for help): 
</pre>

<p>
This particular disk is configured to house seven Linux filesystems (each with
a corresponding partition listed as "Linux") as well as a swap partition
(listed as "Linux swap"). 
</p>

</body>
</subsection>
<subsection>
<title>Removing all Partitions</title>
<body>

<p>
We will first remove all existing partitions from the disk. Type <c>d</c> to
delete a partition. For instance, to delete an existing <path>/dev/sda1</path>:
</p>

<pre caption="Deleting a partition">
Command (m for help): <i>d</i>
Partition number (1-4): <i>1</i>
</pre>

<p>
The partition has been scheduled for deletion. It will no longer show up if you
type <c>p</c>, but it will not be erased until your changes have been saved. If
you made a mistake and want to abort without saving your changes, type <c>q</c>
immediately and hit enter and your partition will not be deleted.
</p>

<p>
Now, assuming that you do indeed want to wipe out all the partitions on your
system, repeatedly type <c>p</c> to print out a partition listing and then type
<c>d</c> and the number of the partition to delete it. Eventually, you'll end 
up with a partition table with nothing in it:
</p>

<pre caption="An empty partition table">
Disk /dev/sda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

Device Boot    Start       End    Blocks   Id  System

Command (m for help):
</pre>

<p>
Now that the in-memory partition table is empty, we're ready to create the
partitions. We will use a default partitioning scheme as discussed previously.
Of course, don't follow these instructions to the letter if you don't want the
same partitioning scheme!
</p>

</body>
</subsection>
<subsection>
<title>Creating the BIOS Boot Partition</title>
<body>

<p>
We first create a very small BIOS boot partition. Type <c>n</c> to create a new
partition, then <c>p</c> to select a primary partition, followed by <c>1</c> to
select the first primary partition. When prompted for the first sector, make sure
it starts from <c>2048</c> (which is needed for the boot loader) and hit enter. When
prompted for the last sector, type <c>+2M</c> to create a partition 2 Mbyte
in size:
</p>

<note>
The start from sector 2048 is a fail-safe in case the boot loader does not
detect this partition as being available for its use.
</note>

<pre caption="Creating the BIOS boot partition">
Command (m for help): <i>n</i>
Command action
  e   extended
  p   primary partition (1-4)
<i>p</i>
Partition number (1-4): <i>1</i>
First sector (64-10486533532, default 64): <i>2048</i>
Last sector, +sectors +size{M,K,G} (4096-10486533532, default 10486533532): <i>+2M</i>
</pre>

<p>
Mark the partition for EFI purposes:
</p>

<pre caption="Marking the partition for EFI purposes">
Command (m for help): <i>t</i>
Selected partition 1
Hex code (type L to list codes): <i>ef</i>
Changed system type of partition 1 to ef (EFI (FAT-12/16/32))
</pre>

</body>
</subsection>
<subsection>
<title>Creating the Boot Partition</title>
<body>

<p>
We now create a small boot partition. Type <c>n</c> to create a new partition,
then <c>p</c> to select a primary partition, followed by <c>2</c> to select the
second primary partition. When prompted for the first sector, accept the default
by hitting enter. When prompted for the last sector, type <c>+128M</c> to create a
partition 128 Mbyte in size:
</p>

<pre caption="Creating the boot partition">
Command (m for help): <i>n</i>
Command action
  e   extended
  p   primary partition (1-4)
<i>p</i>
Partition number (1-4): <i>2</i>
First sector (5198-10486533532, default 5198): <comment>(Hit enter)</comment>
Last sector, +sectors +size{M,K,G} (4096-10486533532, default 10486533532): <i>+128M</i>
</pre>

<p>
Now, when you type <c>p</c>, you should see the following partition printout:
</p>

<pre caption="Created boot partition">
Command (m for help): <i>p</i>

Disk /dev/sda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

   Device Boot    Start       End    Blocks   Id  System
/dev/sda1             1         3      5198+  ef  EFI (FAT-12/16/32)
/dev/sda2             3        14    105808+  83  Linux
</pre>

<p>
We need to make this partition bootable. Type <c>a</c> to toggle the bootable
flag on a partition and select <c>2</c>. If you press <c>p</c> again, you will
notice that an <e>*</e> is placed in the "Boot" column.
</p>

</body>
</subsection>
<subsection>
<title>Creating the Swap Partition</title>
<body>

<p>
Let's now create the swap partition. To do this, type <c>n</c> to create a new 
partition, then <c>p</c> to tell fdisk that you want a primary partition. Then 
type <c>3</c> to create the third primary partition, <path>/dev/sda3</path> in
our case. When prompted for the first sector, hit enter. When prompted for 
the last sector, type <c>+512M</c> (or any other size you need for the swap
space) to create a partition 512MB in size.
</p>

<p>
After you've done this, type <c>t</c> to set the partition type, <c>3</c> to select 
the partition you just created and then type in <c>82</c> to set the partition 
type to "Linux Swap". 
</p>

</body>
</subsection>
<subsection>
<title>Creating the Root Partition</title>
<body>

<p>
Finally, let's create the root partition. To do this, type <c>n</c> to create a 
new partition, then <c>p</c> to tell fdisk that you want a primary partition. 
Then type <c>4</c> to create the fourth primary partition, <path>/dev/sda4</path>
in our case. When prompted for the first sector, hit enter. When prompted for
the last sector, hit enter to create a partition that takes up the rest of the
remaining space on your disk. After completing these steps, typing <c>p</c> 
should display a partition table that looks similar to this:
</p>

<pre caption="Partition listing after creating the root partition">
Command (m for help): <i>p</i>

Disk /dev/sda: 30.0 GB, 30005821440 bytes
240 heads, 63 sectors/track, 3876 cylinders
Units = cylinders of 15120 * 512 = 7741440 bytes

   Device Boot    Start       End    Blocks   Id  System
/dev/sda1             1         3      5198+  ef  EFI (FAT-12/16/32)
/dev/sda2   *         3        14    105808+  83  Linux
/dev/sda3            15        81    506520   82  Linux swap
/dev/sda4            82      3876  28690200   83  Linux
</pre>

</body>
</subsection>
<subsection>
<title>Saving the Partition Layout</title>
<body>

<p>
To save the partition layout and exit <c>fdisk</c>, type <c>w</c>.
</p>

<pre caption="Save and exit fdisk">
Command (m for help): <i>w</i>
</pre>

<p>
Now that your partitions are created, you can continue with <uri
link="#filesystems">Creating Filesystems</uri>.
</p>

</body>
</subsection>
</section>
<section id="filesystems">
<title>Creating Filesystems</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Now that your partitions are created, it is time to place a filesystem on them. 
If you don't care about what filesystem to choose and are happy with what we use
as default in this handbook, continue with <uri 
link="#filesystems-apply">Applying a Filesystem to a Partition</uri>.
Otherwise read on to learn about the available filesystems...
</p>

</body>
</subsection>

<subsection>
<include href="hb-install-filesystems.xml"/>
</subsection>

<subsection id="filesystems-apply">
<title>Applying a Filesystem to a Partition</title>
<body>

<p>
To create a filesystem on a partition or volume, there are tools available for 
each possible filesystem:
</p>

<table>
<tr>
  <th>Filesystem</th>
  <th>Creation Command</th>
</tr>
<tr>
  <ti>ext2</ti>
  <ti><c>mkfs.ext2</c></ti>
</tr>
<tr>
  <ti>ext3</ti>
  <ti><c>mkfs.ext3</c></ti>
</tr>
<tr>
  <ti>ext4</ti>
  <ti><c>mkfs.ext4</c></ti>
</tr>
<tr>
  <ti>reiserfs</ti>
  <ti><c>mkreiserfs</c></ti>
</tr>
<tr>
  <ti>xfs</ti>
  <ti><c>mkfs.xfs</c></ti>
</tr>
<tr>
  <ti>jfs</ti>
  <ti><c>mkfs.jfs</c></ti>
</tr>
</table>

<p>
For instance, to have the boot partition (<path>/dev/sda2</path> in our
example) in ext2 and the root partition (<path>/dev/sda4</path> in our example)
in ext4 (as in our example), you would use:
</p>

<pre caption="Applying a filesystem on a partition">
# <i>mkfs.ext2 /dev/sda2</i>
# <i>mkfs.ext4 /dev/sda4</i>
</pre>

<p>
Now create the filesystems on your newly created partitions (or logical
volumes).
</p>

</body>
</subsection>
<subsection>
<title>Activating the Swap Partition</title>
<body>

<p>
<c>mkswap</c> is the command that is used to initialize swap partitions:
</p>

<pre caption="Creating a Swap signature">
# <i>mkswap /dev/sda3</i>
</pre>

<p>
To activate the swap partition, use <c>swapon</c>:
</p>

<pre caption="Activating the swap partition">
# <i>swapon /dev/sda3</i>
</pre>

<p>
Create and activate the swap with the commands mentioned above.
</p>

</body>
</subsection>
</section>
<section>
<title>Mounting</title>
<body>

<p>
Now that your partitions are initialized and are housing a filesystem, it is
time to mount those partitions. Use the <c>mount</c> command. Don't forget to
create the necessary mount directories for every partition you created. As an
example we mount the root and boot partition:
</p>

<pre caption="Mounting partitions">
# <i>mount /dev/sda4 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/sda2 /mnt/gentoo/boot</i>
</pre>

<note>
If you want your <path>/tmp</path> to reside on a separate partition, be sure to
change its permissions after mounting: <c>chmod 1777 /mnt/gentoo/tmp</c>. This
also holds for <path>/var/tmp</path>.
</note>

<p>
We will also have to mount the proc filesystem (a virtual interface with the 
kernel) on <path>/proc</path>. But first we will need to place our files on the partitions.
</p>

<p>
Continue with <uri link="?part=1&amp;chap=5">Installing the Gentoo
Installation Files</uri>.
</p>

</body>
</section>
</sections>
