<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/hb-install-x86+amd64-kernel.xml,v 1.50 2013/03/16 18:58:17 swift Exp $ -->

<sections>

<abstract>
The Linux kernel is the core of every distribution. This chapter
explains how to configure your kernel.
</abstract>

<version>20</version>
<date>2013-03-16</date>

<section>
<title>Installing the Sources</title>
<subsection>
<title>Choosing a Kernel</title>
<body>

<p>
The core around which all distributions are built is the Linux kernel. It is the
layer between the user programs and your system hardware. Gentoo provides its
users several possible kernel sources. A full listing with description is
available at the <uri link="/doc/en/gentoo-kernel.xml">Gentoo Kernel
Guide</uri>.
</p>

<p>
For <keyval id="arch"/>-based systems we have <c>gentoo-sources</c>
(kernel source patched for extra features).
</p>

<p>
Choose your kernel source and install it using <c>emerge</c>.
</p>

<pre caption="Installing a kernel source">
# <i>emerge gentoo-sources</i>
</pre>

<p>
When you take a look in <path>/usr/src</path> you should see a symlink called
<path>linux</path> pointing to your kernel source. In this case, the installed
kernel source points to <c>gentoo-sources-<keyval id="kernel-version"/></c>.
Your version may be different, so keep this in mind.
</p>

<pre caption="Viewing the kernel source symlink">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root   root    12 Oct 13 11:04 /usr/src/linux -&gt; linux-<keyval id="kernel-version"/>
</pre>

<p>
Now it is time to configure and compile your kernel source. You can use
<c>genkernel</c> for this, which will build a generic kernel as used by the
Installation CD. We explain the "manual" configuration first though, as it is
the best way to optimize your environment.
</p>

<p>
If you want to manually configure your kernel, continue now with <uri
link="#manual">Default: Manual Configuration</uri>. If you want to use
<c>genkernel</c> you should read <uri link="#genkernel">Alternative: Using
genkernel</uri> instead.
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>Default: Manual Configuration</title>
<subsection>
<title>Introduction</title>
<body>

<p>
Manually configuring a kernel is often seen as the most difficult procedure a
Linux user ever has to perform. Nothing is less true -- after configuring a
couple of kernels you don't even remember that it was difficult ;)
</p>

<p>
However, one thing <e>is</e> true: you must know your system when you start
configuring a kernel manually. Most information can be gathered by emerging
pciutils (<c>emerge pciutils</c>) which contains <c>lspci</c>. You will now
be able to  use <c>lspci</c> within the chrooted environment. You may safely
ignore any <e>pcilib</e> warnings (like pcilib: cannot open
/sys/bus/pci/devices) that <c>lspci</c> throws out. Alternatively, you can run
<c>lspci</c> from a <e>non-chrooted</e> environment. The results are the same.
You can also run <c>lsmod</c> to see what kernel modules the Installation CD
uses (it might provide you with a nice hint on what to enable).
</p>

<p>
Now go to your kernel source directory and execute <c>make menuconfig</c>. This
will fire up an ncurses-based configuration menu.
</p>

<pre caption="Invoking menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
You will be greeted with several configuration sections. We'll first list some
options you must activate (otherwise Gentoo will not function, or not function
properly without additional tweaks).
</p>

</body>
</subsection>
<subsection>
<title>Activating Required Options</title>
<body>

<p>
Make sure that every driver that is vital to the booting of your system (such as
SCSI controller, ...) is compiled <e>in</e> the kernel and not as a module,
otherwise your system will not be able to boot completely.
</p>

</body>
<body test="func:keyval('arch')='AMD64'">

<p>
We shall then select the exact processor type. The x86_64 kernel maintainer
strongly recommends users enable MCE features so that they are able to be
notified of any hardware problems. On x86_64, these errors are not printed to
<c>dmesg</c> like on other architectures, but to <path>/dev/mcelog</path>. This
requires the <c>app-admin/mcelog</c> package. Make sure you select IA32
Emulation if you want to be able to run 32-bit programs. Gentoo will install a
multilib system (mixed 32-bit/64-bit computing) by default, so this option is
required.
</p>

<note>
If you plan to use a non-multilib profile (for a pure 64-bit system), then you
don't have to select IA32 Emulation support. However, you'll also need to follow
the <uri link="?part=1&amp;chap=6#doc_chap2_sect2">instructions</uri> for
switching to a <uri link="/doc/en/gentoo-amd64-faq.xml">non-multilib
profile</uri>, as well as choosing the correct <uri
link="?part=1&amp;chap=10#doc_chap2_sect2">bootloader</uri>.
</note>

<pre caption="Selecting processor type and features">
Processor type and features  --->
   [ ] Machine Check / overheating reporting 
   [ ]   Intel MCE Features
   [ ]   AMD MCE Features
  Processor family (AMD-Opteron/Athlon64)  --->
    ( ) Opteron/Athlon64/Hammer/K8
    ( ) Intel P4 / older Netburst based Xeon
    ( ) Core 2/newer Xeon
    ( ) Intel Atom
    ( ) Generic-x86-64
Executable file formats / Emulations  --->
   [*] IA32 Emulation
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
Now select the correct processor family:
</p>

<pre caption="Selecting correct processor family">
Processor type and features ---&gt;
  <comment>(Change according to your system)</comment>
  (<i>Athlon/Duron/K7</i>) Processor family
</pre>

</body>
<body>

<p>
Next select <e>Maintain a devtmpfs file system to mount at /dev</e> so that
critical device files are already available early in the boot process.
</p>

<pre caption="Enabling devtmpfs support">
Device Drivers ---&gt;
  Generic Driver Options ---&gt;
    [*] Maintain a devtmpfs filesystem to mount at /dev
    [ ]   Automount devtmpfs at /dev, after the kernel mounted the rootfs
</pre>

<p>
Now go to <c>File Systems</c> and select support for the filesystems you use.
<e>Don't</e> compile them as modules, otherwise your Gentoo system will not be
able to mount your partitions. Also select <c>Virtual memory</c> and <c>/proc
file system</c>.
</p>

<pre caption="Selecting necessary file systems">
File systems ---&gt;
<comment>(Select one or more of the following options as needed by your system)</comment>
  &lt;*&gt; Second extended fs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; The Extended 4 (ext4) filesystem
  &lt;*&gt; Reiserfs support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; XFS filesystem support
  ...
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>(Enable GPT partition label support if you used that previously)</comment>
-*- Enable the block layer --->
    ...
    Partition Types --->
    [*] Advanced partition selection
      ...
      [*] EFI GUID Partition support
</pre>

<p>
If you are using PPPoE to connect to the Internet or you are using a dial-up
modem, you will need the following options in the kernel:
</p>

<pre caption="Selecting PPPoE necessary drivers">
Device Drivers ---&gt;
  Network device support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
The two compression options won't harm but are not definitely needed, neither
does the <c>PPP over Ethernet</c> option, that might only be used by <c>ppp</c>
when configured to do kernel mode PPPoE.
</p>

<p>
If you require it, don't forget to include support in the kernel for your
ethernet card.
</p>

<p test="func:keyval('arch')='x86'">
If you have an Intel CPU that supports HyperThreading (tm), or you have a
multi-CPU system, you should activate "Symmetric multi-processing support":
</p>

<p test="func:keyval('arch')='AMD64'">
If you have a multi-CPU Opteron or a multi-core (e.g. AMD64 X2) system, you
should activate "Symmetric multi-processing support":
</p>

<pre caption="Activating SMP support">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<note>
In multi-core systems, each core counts as one processor.
</note>

<p test="func:keyval('arch')='x86'">
If you have more than 4GB of RAM, you need to enable "High Memory Support
(64G)".
</p>

<p>
If you use USB Input Devices (like Keyboard or Mouse) don't forget to enable
those as well:
</p>

<pre caption="Activating USB Support for Input Devices">
Device Drivers ---&gt;
  [*] HID Devices  ---&gt;
    &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
If you want PCMCIA support for your laptop, don't forget to enable
support for the PCMCIA card bridge present in your system:
</p>

<pre caption="Enabling PCMCIA support">
Bus options (PCI etc.)  ---&gt;
  PCCARD (PCMCIA/CardBus) support  ---&gt;
    &lt;*&gt; PCCard (PCMCIA/CardBus) support
<comment>(select 16 bit if you need support for older PCMCIA cards. Most people want this.)</comment>
    &lt;*&gt;   16-bit PCMCIA support
    [*]   32-bit CardBus support
<comment>(select the relevant bridges below)</comment>
    *** PC-card bridges ***
    &lt;*&gt; CardBus yenta-compatible bridge support (NEW)
    &lt;*&gt; Cirrus PD6729 compatible bridge support (NEW)
    &lt;*&gt; i82092 compatible bridge support (NEW)
</pre>

<p>
When you've finished configuring the kernel, continue with <uri
link="#compiling">Compiling and Installing</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>Compiling and Installing</title>
<body>

<p>
Now that your kernel is configured, it is time to compile and install it. Exit
the configuration and start the compilation process:
</p>

<pre caption="Compiling the kernel">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
When the kernel has finished compiling, copy the kernel image to
<path>/boot</path>. Use whatever name you feel is appropriate for your kernel
choice and remember it as you will need it later on when you configure your
bootloader. Remember to replace <c><keyval id="kernel-name"/></c> with the
name and version of your kernel.
</p>

<pre caption="Installing the kernel">
# <i>cp arch/<keyval id="arch-sub"/>/boot/bzImage /boot/<keyval id="kernel-name"/></i>
</pre>

</body>
</subsection>
<subsection>
<include href="hb-install-initramfs.xml"/>
</subsection>

</section>
<section id="genkernel">
<title>Alternative: Using genkernel</title>
<body>

<p>
If you are reading this section, you have chosen to use our <c>genkernel</c>
script to configure your kernel for you.
</p>

<p>
Now that your kernel source tree is installed, it's now time to compile your
kernel by using our <c>genkernel</c> script to automatically build a kernel for
you. <c>genkernel</c> works by configuring a kernel nearly identically to the
way our Installation CD kernel is configured. This means that when you use
<c>genkernel</c> to build your kernel, your system will generally detect all
your hardware at boot-time, just like our Installation CD does. Because
genkernel doesn't require any manual kernel configuration, it is an ideal
solution for those users who may not be comfortable compiling their own kernels.
</p>

<p>
Now, let's see how to use genkernel. First, emerge the genkernel ebuild:
</p>

<pre caption="Emerging genkernel">
# <i>emerge genkernel</i>
</pre>

<p>
Now, compile your kernel sources by running <c>genkernel all</c>. Be aware
though, as <c>genkernel</c> compiles a kernel that supports almost all
hardware, this compilation will take quite a while to finish!
</p>

<p>
Note that, if your boot partition doesn't use ext2 or ext3 as filesystem you
might need to manually configure your kernel using <c>genkernel --menuconfig
all</c> and add support for your filesystem <e>in</e> the kernel (i.e.
<e>not</e> as a module). Users of LVM2 will probably want to add <c>--lvm2</c>
as an argument as well.
</p>

<pre caption="Running genkernel">
# <i>genkernel all</i>
</pre>

<p>
Once <c>genkernel</c> completes, a kernel, full set of modules and
<e>initial ram disk</e> (initramfs) will be created. We will use the kernel
and initrd when configuring a boot loader later in this document. Write
down the names of the kernel and initrd as you will need it when writing
the bootloader configuration file. The initrd will be started immediately after
booting to perform hardware autodetection (just like on the Installation CD)
before your "real" system starts up.
</p>

<pre caption="Checking the created kernel image name and initrd">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>Kernel Modules</title>

<subsection>
<include href="hb-install-kernelmodules.xml"/>
</subsection>

</section>
</sections>
