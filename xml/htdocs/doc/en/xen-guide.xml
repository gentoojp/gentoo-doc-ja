<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/xen-guide.xml,v 1.16 2013/12/09 10:33:16 swift Exp $ -->

<guide disclaimer="draft" redirect="https://wiki.gentoo.org/wiki/Xen">
<title>Configuring Gentoo with Xen</title>

<author title="Author">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Editor">
  <mail link="nightmorph"/>
</author>

<abstract>
This guide describes how to start using Xen on your Gentoo system
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>10</version>
<date>2013-11-24</date>

<chapter>
<title>Introduction</title>
<section>
<body>

<p>
The <uri link="http://www.xen.org/">Xen</uri> technology allows you to run
multiple operating systems on a single physical system, govern resource
consumption and even migrate domains (which are the virtual environments in
which a guest operating system runs) from one Xen-powered system to another. Xen
requires the host operating system to support Xen (which, in this case, will be
a Linux kernel) but guest operating systems can run unmodified <e>if</e> your
hardware supports Intel Virtualization Technology (VT-x) or AMD Virtualization
Technology (SVM). Otherwise your guest operating systems must also support Xen.
</p>

<p>
This guide will talk you through the configuration steps necessary to get Xen up
and running on Gentoo Linux. We will not discuss Xen itself (the Xen project has
<uri link="http://xen.org/support/documentation.html">decent documentation</uri>
available) nor will we talk about specialized setups that might be very
interesting for Xen setups but are not Xen-related (like exporting Portage
through NFS, booting Linux using PXE, etc.)
</p>

</body>
</section>
</chapter>
<chapter>
<title>Preparing Domain0</title>
<section>
<title>Introduction</title>
<body>

<p>
<e>Domain0</e> is the primary domain under Xen, hosting the host operating
system which governs all other domains. In this chapter we will prepare an
existing Gentoo installation to become the host operating system in this domain
and build the Xen-powered kernel so that Gentoo is ready to host other Xen
domains.
</p>

</body>
</section>
<section>
<title>Rebuilding the Gentoo Installation?</title>
<body>

<p>
A dramatic change that might be necessary is to rebuild the entire Gentoo
installation with a different <c>CFLAGS</c> setting. Guest operating systems
running under Xen might otherwise see major performance degradation. If you,
however, are planning on checking out Xen rather than installing it for
production use and are not terribly fond of rebuilding all programs, you can
skip this step. In this case you will notice performance degradation but you
will still be able to use Xen.
</p>

<impo>
It is advised that, if you change your <c>CFLAGS</c> and build your system with
a gcc lower than version 4, you do not have <c>-Os</c> set as it has been
reported to produce broken code.
</impo>

<pre caption="Editing the CFLAGS and rebuild the Gentoo installation">
~# <i>nano -w /etc/portage/make.conf</i>
<comment>(Add -mno-tls-direct-seg-refs ONLY if you have a 32-bit dom0)</comment>
<comment>(You don't need this flag if you have a 64-bit dom0)</comment>
CFLAGS="-O2 -march=pentium4 -pipe <i>-mno-tls-direct-seg-refs</i>"

~# <i>emerge -e world</i>
</pre>

<p>
If you boot your system using an initial ramdisk (initrd) you need to
rebuild the initrd as well (which is best done by running all steps you would do
when you rebuild your kernel).
</p>

</body>
</section>
<section>
<title>Installing Xen</title>
<body>

<p>
Xen actually contains many components, so you'll need to install a few
packages.
</p>

<pre caption="Installing Xen">
~# <i>emerge xen xen-tools gentoo-sources</i>
</pre>

</body>
</section>
<section>
<title>Building the Kernel</title>
<body>

<p>
Next we'll build the Linux kernel with Xen support. This kernel, whose sources
are available at <path>/usr/src/linux</path>, will be our main
running kernel (i.e. the one running domain 0). In the <c>XEN</c> section you'll
find drivers for all kinds of input/output, each driver having a <e>backend</e>
and <e>frontend</e> implementation available. For the domain 0 kernel you need
to select the <e>backend</e> implementation: these are used by the other
domains (who use the <e>frontend</e> drivers) to communicate directly with
the hardware. However, you should be able to configure the kernel to provide
support for both frontend (guest) and backend (host) drivers.
</p>

<p>
If you're wondering about networking: each interface in a domain
has a point-to-point link to an interface on domain 0 (called
<path>vifX.Y</path> where X is the domain number and Y the Yth interface of that
domain), so you can configure your network the way you want (bridging, NAT,
etc.)
</p>

<pre caption="Enabling Xen Support">
Processor type and features  ---&gt;
    [*] Paravirtualized guest support ---&gt;
        [*] Xen guest support
</pre>

<pre caption="Kernel Config">
Bus options (PCI etc.)  ---&gt;
    [*] Xen PCI Frontend

[*] Networking support ---&gt;
    Networking options  ---&gt;
        &lt;*&gt; 802.1d Ethernet Bridging
	[*] Network packet filtering framework (Netfilter) ---&gt;
	    [*] Advanced netfilter configuration
	        [*] Bridged IP/ARP packets filtering

Device Drivers ---&gt;
    [*] Block devices (NEW) ---&gt;
        &lt;*&gt; Xen block-device backend driver
    [*] Network device support ---&gt;
        &lt;*&gt; Xen backend network device
    Xen driver support ---&gt;
        [*] Xen memory balloon driver (NEW)
	[*]   Scrub pages before returning them to system (NEW)
	&lt;*&gt; Xen /dev/xen/evtchn device (NEW)
	[*] Backend driver support (NEW)
	&lt;*&gt; Xen filesystem (NEW)
	[*]   Create compatibility mount point /proc/xen (NEW)
	[*] Create xen entries under /sys/hypervisor (NEW)
	&lt;*&gt; userspace grant access device driver (NEW)
	&lt;M&gt; user-space grant reference allocator driver (NEW)
	&lt;M&gt; xen platform pci device driver (NEW)
</pre>

<p>
The shown kernel configuration should allow the kernel image to boot both as a
host as well as a guest. However, if you want to, you can slim down the guest
image kernel considerably. Refer to the Xen documentation for more information.
</p>

<p>
Once the kernel is built you'll find the kernel image immediately in the
build directory (not inside <path>arch/</path> or any other directory) called
<path>vmlinuz</path>. Copy it to <path>/boot</path> and then configure your
bootloader to use the Xen hypervisor (one of the components installed
previously) which is stored as <path>/boot/xen.gz</path>. In the bootloader
configuration, add your newly built kernel as the kernel that Xen should
boot. For instance, for GRUB:
</p>

<pre caption="GRUB Configuration for Xen">
title Xen Gentoo Linux 3.5
root (hd0,0)
kernel /boot/xen.gz
module /boot/kernel-3.5.x.y-xen0 root=/dev/sda3
</pre>

<p>
Now reboot your system into Xen and check if you can do whatever you
normally do on your system. If this is the case, you can edit your
bootloader configuration to always boot into Xen.
</p>

<note>
If you wish to start guest domains automatically on boot add <c>xendomains</c>
to the default runlevel as well and create a symlink in
<path>/etc/xen/auto/</path> to the Xen configuration files for the domains
you wish to start.
</note>

</body>
</section>
</chapter>
<chapter>
<title>Creating an Unpriviledged Domain</title>
<section>
<title>Building the Kernel</title>
<body>

<p>
Go to the Xen-powered Linux kernel source and, if necessary, update the
configuration. It is wise to keep as many topics as possible similar to
the main kernel. Then build the kernel
and place the resulting <path>vmlinuz</path> file where you want (we assume this
is <path>/mnt/data/xen/kernel</path>):
</p>

<pre caption="Building the guest kernel">
~# <i>make O=~/build/domU</i>
~# <i>cp ~/build/domU/vmlinuz /mnt/data/xen/kernel/kernel-3.5.x.y-xen</i>
</pre>

</body>
</section>
<section>
<title>Creating the Domain Disks</title>
<body>

<p>
For best performance, it is best to dedicate a partition (or logical volume) to
a domain rather than a file based filesystem. However, if you are going to use
Xen primarily for tests using a file based filesystem does have its advantages
(especially regarding maintenance).
</p>

<p>
You can create a file based filesystem using <c>dd</c> and <c>mke2fs</c> (or
any other file system creation tool). For instance, to create a 4 Gbyte ext4
filesystem:
</p>

<pre caption="Creating a file based filesystem">
~# <i>dd if=/dev/zero of=/mnt/data/xen/disks/ext4root.img bs=1M count=4096</i>
~# <i>mkfs.ext4 /mnt/data/xen/disks/ext4root.img</i>
</pre>

</body>
</section>
<section>
<title>Configuring a Domain</title>
<body>

<p>
Next we create a Xen configuration file for a domain. You can store these
configuration files where you want, for instance at
<path>/mnt/data/xen/configs</path>. As an example, we create a configuration
file for a small Gentoo environment which uses the disk image we created
previously:
</p>

<pre caption="Creating a domain configuration file">
~# <i>nano -w /mnt/data/xen/configs/gentoo</i>

kernel = "/mnt/data/xen/kernel/kernel-3.5.x.y-xen"
memory = 512
name   = "gentoo"
<comment>(Map the disk image to the virtual /dev/sda1)</comment>
disk   = ['file:/mnt/data/xen/disks/ext4root.img,sda1,w']
root   = "/dev/sda1 ro"
</pre>

<p>
If you are using a block device (such as an lvm volume or partition) for
the disk use 'phy:' instead of 'file:' and leave off /dev. For example:
</p>

<pre caption="Using a block device">
<comment>(LVM Volume)</comment>
disk = [ 'phy:lvm/xen-guest-root,sda1,w' ]

<comment>(Physical Partition)</comment>
disk = [ 'phy:sdb6,sda1,w' ]
</pre>

<p>
You can find example configuration files in <path>/etc/xen</path>.
</p>

</body>
</section>
<section>
<title>Launching the New Domain</title>
<body>

<p>
Now we're all set and we can launch the new domain. If the disk image contained
an operating system, we could just create and attach the domain using the
<c>xl</c> command:
</p>

<pre caption="Creating and starting a new domain">
~# <i>xl create /mnt/data/xen/configs/gentoo -c</i>
</pre>

<p>
The domain would be booted inside the terminal in which you executed the
command. However, in our case, the disk image is empty so the domain won't boot
up in anything useful. To fix this, you can loop-mount the image and install
Gentoo as you're used to.
</p>

<p>
If you want to disconnect from the domain, press <path>Ctrl+]</path>. You can
always reconnect to the domains' console using <c>xl console gentoo</c>.
However, there is only one console per domain, so only use it when you can't
access the domain otherwise (for instance, through SSH).
</p>

</body>
</section>
</chapter>
<chapter>
<title>Networking on Unpriviledged Domains</title>
<section>
<title>Introduction</title>
<body>

<p>
Xen works best when using a bridged mode network configuration.
This means that your default network interface on
the administrative domain becomes a bridge which accepts connections to the
virtual domains as well as to the IP address your administrative domain has.
</p>

</body>
</section>
<section>
<title>Bridged Interfaces</title>
<body>

<p>
Create a bridge interface by creating a new link to the networking init script
as provided by Gentoo:
</p>

<pre caption="Creating a bridge interface">
# <i>cd /etc/init.d</i>
# <i>ln -s net.lo net.br0</i>
</pre>

<p>
Next, edit <path>/etc/conf.d/net</path> and setup the bridge:
</p>

<pre caption="Enabling the bridge br0 interface">
# <i>nano -w /etc/conf.d/net</i>

bridge_br0="eth0"
config_br0="192.168.1.200 netmask 255.255.255.0 brd 192.168.1.255"
routes_br0="default via 192.168.1.1"
</pre>

<p>
Finally, install the <e>net-misc/bridge-utils</e> package, and make sure the
<path>net.br0</path> init script is loaded at boot.
</p>

<pre caption="Finishing the bridge setup">
# <i>emerge net-misc/bridge-utils</i>
# <i>rc-update add net.br0 default</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Further Resources</title>
<section>
<title>Xen Documentation</title>
<body>

<ul>
  <li>
    <uri link="http://www.xen.org/support/documentation.html">Official Xen
    documentation</uri>
  </li>
  <li>
    <uri link="http://wiki.xen.org/">Xen Wiki</uri>
  </li>
</ul>

</body>
</section>
<section>
<title>Xen Tools</title>
<body>

<ul>
  <li>
    <uri
    link="http://virt-manager.org/">app-emulation/virt-manager</uri>
    is a graphical tool for administering virtual machines
  </li>
</ul>

</body>
</section>
</chapter>
</guide>
