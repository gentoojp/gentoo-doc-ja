<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/gcc-optimization.xml,v 1.3 2013/07/28 09:12:54 naota Exp $ -->

<guide disclaimer="obsolete" redirect="https://wiki.gentoo.org/wiki/GCC_optimization">
<title>コンパイル最適化ガイド</title>

<author title="Author">
  <mail link="nightmorph"/>
</author>

<abstract>
このガイドは、安全で分別のあるCFLAGSとCXXFLAGSを使ったコンパイル済みコードの最適化の導入を提供します。
また、一般的な最適化の裏側にある理論について述べます。
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>6</version>
<!-- 2012-12-25 -->
<date>2013-07-27</date>
<!-- Original revision: 1.22 -->

<chapter>
<title>はじめに</title>
<section>
<title>CFLAGSとCXXFLAGSとは？</title>
<body>

<p>
CFLAGSとCXXFLAGSは、ソースコードをコンパイルするときに使われるオプションを
GNUコンパイラコレクションであるgccに伝えるために使われる環境変数です。
CFLAGSはCで書かれたソースコード、CXXFLAGSはC++で書かれたソースコード用になります。
</p>

<p>
これらはプログラムのデバッグメッセージの量を減らすのに使われたり、
エラーや警告のレベルを増加させたり、また、もちろん生成されるコードの最適化にも使われたりします。
<uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Invoking-GCC.html#Invoking-GCC">GNU
gcc ハンドブック</uri>に利用可能なフラグとその働きの完全なリストが記載されています。
</p>

</body>
</section>
<section>
<title>どのように使われているのでしょうか？</title>
<body>

<p>
CFLAGSとCXXFLAGSは二通り使われ方があります。
一つ目は、プログラム毎にautomakeにより生成されたMakefileと共に使う方法です。
</p>

<p>
しかしながら、この方法はPortageツリーの中にあるパッケージをインストールする際に使うべきではありません。
二つ目は、CFLAGSとCXXFLAGSを<path>/etc/portage/make.conf</path>で設定する方法です。
この方法を使えば、全てのパッケージはあなたが設定したフラグでコンパイルされるでしょう。
</p>

<pre caption="/etc/portage/make.conf内のCFLAGS">
CFLAGS="-march=athlon64 -O2 -pipe"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
見てわかるとおり、CXXFLAGSはCFLAGSの中にある全てのフラグが設定されています。
これでやりたいことはほぼ十分できています。
CXXFLAGSの中に追加のフラグを定義する必要はありません。
</p>

</body>
</section>
<section>
<title>よくある誤解</title>
<body>

<p>
CFLAGSとCXXFLAGSは、
ソースコードから小さくて早いバイナリを得るにはとても効果的な方法である一方で、
ソースコード中の機能を損なったり、バイナリのサイズが膨れ上がったり、実行速度を低下させたり、
コンパイルの失敗さえも引き起こす場合もあります！
</p>

<p>
CFLAGSは特効薬ではありません。これらは自動的にあなたのシステムを早くしたり、
ディスク上のスペースが少なくなるようバイナリを縮めてはくれないでしょう。
たくさんのフラグを、システムを最適化する目的で追加することは、
確実に失敗します。払った労力に見合う実入りを得るにも限度と言うものがあります。
</p>

<p>
インターネットでは挑戦的なCFLAGSやCXXFLAGSの自慢も見受けられますが、
それらはいい影響を与えるよりも、悪影響を及ぼす可能性の方がはるかに高いです。
そもそも最適化フラグは、特定の場合に、
特定の目的の為に使われるよう設計されたと言うことを肝に銘じておきましょう。
とあるひとつのフラグが、ソースコードのごく一部を良くするからといって、
あなたのマシンにインストールされる全てをコンパイルするのに適しているという意味ではないのです！
</p>

</body>
</section>
<section>
<title>準備はできましたか？</title>
<body>

<p>
リスクを伴うことを理解したところで、
あなたのコンピュータのために確実で安全な最適化を見ていきましょう。
そうすれば、この先、<uri
link="http://bugs.gentoo.org">Bugzilla</uri>で開発者に歓迎される役立つ報告をすることができます。
（開発者は、大抵、問題が再現するか確かめるために、
最小限のCFLAGSでパッケージを再コンパイルすることを要求します。
挑戦的なフラグはコードを破壊しうることを覚えておいてください。）
</p>

</body>
</section>
</chapter>

<chapter>
<title>最適化について</title>
<section>
<title>基本</title>
<body>

<p>
CFLAGSとCXXGLAGSの使用目的は、
あなたのシステム向けにあつらえた、
可能な限り早くて小さな、かつ完全に動作するコードを生成することです。
時には、これらの条件は相互に排他的ですので、
うまく動作すると分かっている組み合わせをここでは使うことにします。
原則的には、お手持ちのCPUアーキテクチャ向けに利用可能な良い最適化が用意されています。
後ほど私たちは積極的なフラグについて言及するので、
あなたの探しているものも見つかるでしょう。
<c>gcc</c>マニュアルに載っている(数えきれないほど)たくさんあるフラグについては議論せず、
基本的で最もよく知られているフラグを対象にします。
</p>

<note>
フラグが実際にどう働くか確証が得られないときはいつでも<uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.3.3/gcc/Optimize-Options.html#Optimize-Options">gccマニュアル</uri>の関連する章を参照してください。
もしそれでもわからないときには、Googleで検索したり、<c>gcc</c>
<uri link="http://gcc.gnu.org/lists.html">メーリングリスト</uri>を調べてみてください。
</note>

</body>
</section>
<section>
<title>-march</title>
<body>

<p>
まず最初に、一番重要なフラグは<c>-march</c>です。
これはお手持ちのプロセッサ<uri
link="http://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3">アーキテクチャ</uri>のためのコードを生成するようコンパイラに伝えます。
つまり、特定のCPU向けのコードを生成すべきであるといっているのです。
CPUが違えば、性能が異なり、異なる命令セットをサポートし、コードの実行方法も違います。
<c>-march</c>フラグは、あなたのCPUの全ての性能、特徴、命令セット、癖などに合わせて特化したコードを生成するようにコンパイラに伝えます。
</p>

<p>
たとえ<path>/etc/portage/make.conf</path>に書いてあるCHOST変数を一般的なアーキテクチャに設定していても、
<c>-march</c>を設定すれば、プログラムは指定したプロセッサ向けに最適化されるでしょう。
x86とx86-64のCPUは(とりわけ)<c>-march</c>フラグを使うべきです。
</p>

<p>
どんな種類のCPUを使っていますか？以下のコマンドを実行すれば、それが分かります:
</p>

<pre caption="CPU情報の取得">
$ <i>cat /proc/cpuinfo</i>
</pre>

<p>
では実際に<c>-march</c>を見てみましょう。この例は古いPentium IIIチップ向けです:
</p>

<pre caption="/etc/portage/make.conf: Pentium III向け">
CFLAGS="-march=pentium3"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
こちらはAMD64向けになります:

</p>

<pre caption="/etc/portage/make.conf: AMD64向け">
CFLAGS="-march=athlon64"
CXXFLAGS="${CFLAGS}"
</pre>

<p>
もしどのCPUを使っているのか分からない場合は、
<c>-march=native</c>を使うこともできるでしょう。
このフラグが設定されると、GCCはプロセッサを判別して、
自動的にふさわしいフラグを設定するでしょう。
<brite>しかしながら、
このフラグは異なるCPU向けにパッケージをコンパイルする目的では使用すべきではありません！
</brite>
</p>

<p>
例えば、あるコンピュータでパッケージをコンパイルして、
しかしそれらを別のコンピュータで実行しようとしている場合
(処理の早いコンピュータで、古くて遅いマシンのためにビルドしているときなど)、
<c>-march=native</c>を<e>使わない</e>でください。
"native"というのはコンパイルしているマシンのCPUタイプ<e>のみ</e>に特化して、
アプリケーションのコードを生成することを意味しています。
AMD Athlon 64上で<c>-march=native</c>と共にビルドされたアプリケーションは、
古いVIA C3では実行することができないでしょう。
</p>

<p>
また、<c>-mtune</c>と<c>-mcpu</c>フラグも利用可能です。これらのフラグは
たいてい<c>-march</c>フラグが利用不可能な場合にのみ使われます。
例えば特定のプロセッサアーキテクチャは<c>-mtune</c>や<c>-mcpu</c>が必要になるかもしれません。
残念ながら、<c>gcc</c>の挙動はそれぞれのフラグの振る舞いが、
あるアーキテクチャから近いアーキテクチャであってもあまり一貫性はありません。
</p>

<p>
x86とx86-64のCPUにおいて、<c>-march</c>は全ての利用可能な命令セットと正しいABIを使い、
そのCPUに特化したコードを生成するでしょう。
そのため古かったり種類の異なるCPUとの後方互換性は持っていません。
もし現在Gentooを動かしているシステム以外でそのコードを走らせるつもりがないならば、
<c>-march</c>を使い続けてください。
i386やi486のような古いCPU向けにコードを生成する必要があるときのみ、
<c>-mtune</c>の使用を考慮するべきでしょう。
<c>-mtune</c>は<c>-march</c>よりも一般的なコードを生成します。
特定のコードにチューニングしますが、利用可能な命令セットやABIを考慮しないのです。
<c>-mcpu</c>はx86やx86-64のシステム上では非推奨となっているので、使わないでください。
</p>

<p>
x86/x86-64でない(SparcやAlpha、PowerPCのような)CPUでのみ、
<c>-march</c>の代わりに<c>-mtune</c>や<c>-mcpu</c>が必要になるでしょう。
これらのアーキテクチャ上では、<c>-mtune</c>/<c>-mcpu</c>は(x86/x86-64上での)<c>-march</c>と同じように振る舞うでしょう･･･しかしフラグの名前は違うのです。
繰り返しますが、<c>gcc</c>の振る舞いとフラグ名はアーキテクチャを超えて一貫していないので、
システムでどのフラグを使うべきなのかを<c>gcc</c><uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/submodel-options.html#submodel-options">マニュアル</uri>
で必ず確認してください。
</p>

<note>
更なる<c>-march</c>/<c>-mtune</c>/<c>-mcpu</c>の設定についての情報は、
あなたのアーキテクチャに適した<uri
link="/doc/ja/handbook/">gentooインストールハンドブック</uri>の５章を読んでみてください。
また、<c>gcc</c>マニュアルの<uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/submodel-options.html#submodel-options">アーキテクチャ特有のフラグ</uri>のリストに、
<c>-march</c>と<c>-mcpu</c>と<c>-mtune</c>の違いについてもっと詳しい説明が書いてあります。
</note>

</body>
</section>
<section>
<title>-O</title>
<body>

<p>
次は<c>-O</c>フラグについてです。これは全体の最適化レベルをコントロールします。
特にこの最適化レベルを上げることによって、ソースコードのコンパイルの時間がいくらか増えたり、
よりたくさんのメモリを使用するようになります。
</p>

<p>
<c>-O</c>の設定には5つあります。
<c>-O0</c>、<c>-O1</c>、<c>-O2</c>、<c>-O3</c>、そして<c>-Os</c>です。
これらの中からひとつだけ選び、
<path>/etc/portage/make.conf</path>の中で使ってみてください。
</p>

<p>
<c>-O0</c>を除いて、<c>-O</c>の設定はいずれもいくつかの追加フラグを有効にします。
なので、どの<c>-O</c>レベルで、どのフラグが有効になり、そのフラグにどんな効果があるのかを学ぶために、gccマニュアルの<uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/optimize-options.html#optimize-options">最適化フラグ</uri>
の章を読んで確認しましょう。
</p>

<p>
それぞれの最適化レベルについてみてみましょう:
</p>

<ul>
  <li>
    <c>-O0</c>: このレベル("O"のあとにゼロが続いてます)は、
    完全に最適化をオフにします。
    CFLAGSやCXXFLAGSの中に<c>-O</c>が定義されていない場合のデフォルトです。
    コードが最適化されないので、普通は使われません。
  </li>
  <li>
    <c>-O1</c>: これは最も基本的な最適化レベルです。
    コンパイラはコンパイル時間をたくさんかけることなく、
    高速でサイズの小さなバイナリを生成しようと試みるでしょう。
    これは非常に基本的な最適化しかおこないませんが、その代わり、いつでもうまくいくはずです。
  </li>
  <li>
    <c>-O2</c>: <c>-O1</c>から更に踏み込みます。
    これは特別な理由がない限り<e>推奨される</e>最適化レベルです。
    <c>-O2</c>は<c>-O1</c>により有効になるものに加え、さらにいくつかのフラグを有効にします。
    <c>-O2</c>を使うと、コンパイラは、サイズが大きくなったり、
    たくさんの時間がかかったりしないように、コードのパフォーマンスを増加させようと試みます。
  </li>
  <li>
    <c>-O3</c>: これは最高の最適化レベルであり、また最もリスクが高いです。
    このフラグを有効にしてコンパイルすると長い時間がかかるでしょうし、
    それどころか<e>このフラグと<c>gcc</c> 4.xを使ってシステム全体を作るべきではありません。</e>
    <c>gcc</c>の振る舞いが3.xバージョンからかなり変わってしまっています。
    3.xでは、<c>-O3</c>は実行時間が<c>-O2</c>よりもわずかに早くなっていましたが、
    これはもはや<c>gcc</c> 4.xでは当てはまりません。
    全てのパッケージを<c>-O3</c>と共にコンパイルすることは、
    たくさんのメモリを必要とする大きなバイナリができあがり、
    さらにはコンパイルエラーや(エラーを含む)予期しないプログラムの動作をする確率が、
    かなり上昇します。
    このようにプラス面よりもマイナス面が勝っています。
    払った労力に見合う実入りを得るにも限度がある、という原則を肝に銘じてください。
    <b><c>-O3</c>を使うことは<c>gcc</c> 4.xでは推奨されていません。</b>
  </li>
  <li>
    <c>-Os</c>: このレベルはバイナリのサイズを重視して最適化するでしょう。
    これは<c>-O2</c>フラグの中で、
    生成されるバイナリのサイズが増えないものを全て有効にします。
    CPUのキャッシュが小さかったり、
    ディスクストレージスペースが極端に限られている場合などに非常に有効でしょう。
    しかしながら、かなりの数の問題を引き起こしかねません。それが、
    portageツリーの中のたくさんのebuildでこのフラグが除外されている理由でもあります。
    <c>-Os</c>を使うことは推奨されていません。
  </li>
</ul>

<p>
前述の通り、<c>-O2</c>が推奨される最適化レベルです。
もしパッケージのコンパイルが失敗する場合は、<c>-O3</c>を使っていないか確認してください。
うまくいかなかった場合は、
CFLAGSとCXXFLAGSを(エラー報告や問題の調査向けに)<c>-O1</c>や<c>-O0 -g2 -ggdb</c>
のように、最適化レベルを低く設定し、パッケージを再コンパイルしてみましょう。
</p>

</body>
</section>
<section>
<title>-pipe</title>
<body>

<p>
よく使うフラグに<c>-pipe</c>があります。
このフラグは、生成されるバイナリ自体には何の影響もありませんが、コンパイル処理が早くなります。
これはコンパイルにおける各処理間で一時ファイルを使う代わりに、
より多くのメモリを使うことになりますが、パイプを使うように指示します。
メモリに余裕のないシステムの場合、gccがもしかすると強制終了するかもしれません。
そのような場合はこのフラグを使わないでください。
</p>

</body>
</section>
<section>
<title>-fomit-frame-pointer</title>
<body>

<p>
これは生成されるバイナリのサイズを減少させるために設計されているフラグで、
よく利用されています。
(<c>-O0</c>を除く)全ての<c>-O</c>のレベルで、このフラグを有効にしても(x86-64のように)デバッグ作業の阻害をしないアーキテクチャでは有効になります。
しかしながら、場合によっては明示的に有効にする必要があるかもしれません。
GNU <c>gcc</c>マニュアルによれば、全てのアーキテクチャにおいて、
<c>-O</c>を使えば有効になる訳ではありません。
特にx86においては明示的に指定する必要があります。
しかしながらx86上でこのフラグを使えば、デバッグはほとんど不可能になってしまいます。
</p>

<p>
特に、Javaで書かれたアプリケーションの不具合修正をとても難しくます。
もっとも、Javaだけがこのフラグの影響を受けるわけではありませんが。

このように、このフラグは役立つ一方でデバッグを難しくしているのです。
特にバックトレースは役に立たなくなります。
しかしながら、そんなにソフトウェアのデバッグを行う予定がなく、
他に<c>-ggdb</c>のようなデバッグ関連のCFLAGSを追加していないのであれば、
<c>-fomit-frame-pointer</c>を試しに使ってみてもいいでしょう。
</p>

<impo>
<c>-fomit-frame-pointer</c>と似ている<c>-momit-leaf-frame-pointer</c>フラグを組み合わせて<e>使わない</e>でください。
後者のフラグを使うのはやめてください。<c>-fomit-frame-pointer</c>のみで十分です。
そのうえ、<c>-momit-leaf-frame-pointer</c>はコードの性能に悪影響を及ぼすことがわかっています。

</impo>

</body>
</section>
<section>
<title>-msse, -msse2, -msse3, -mmmx, -m3dnow</title>
<body>

<p>
これらのフラグは、<uri
link="http://ja.wikipedia.org/wiki/Streaming_SIMD_Extensions">SSE</uri>、<uri
link="http://ja.wikipedia.org/wiki/Streaming_SIMD_Extensions#SSE2">SSE2</uri>、<uri
link="http://ja.wikipedia.org/wiki/Streaming_SIMD_Extensions#SSSE3">SSE3</uri>、<uri
link="http://ja.wikipedia.org/wiki/MMX">MMX</uri>、<uri
link="http://ja.wikipedia.org/wiki/3DNow!">3DNow!</uri>のx86とx86-64アーキテクチャ向け命令セットを有効にします。
これらは主にマルチメディアやゲーム、その他の浮動小数点を多用する計算処理に有用です。
その他にも有用な数学用機能の向上をいくつか含んでいます。
比較的新しいCPUならば、これらの命令セットに対応しています。
</p>

<impo>
CPUがこれらをサポートしているかどうかは<c>cat /proc/cpuinfo</c>を実行して確認してください。
その出力にサポートされているこれらの命令セットが表示されます。
<b>pni</b>が実際はSSE3の別名であることに注意してください。
</impo>

<p>
通常、正しい<c>-march</c>を使っている限り、
これらのどのフラグも<path>/etc/portage/make.conf</path>に加える必要はありません
(例えば<c>-march=nocona</c>は<c>-msse3</c>を有効にします)。
いくつかの注意すべき例外は、比較的新しいVIAとAMD64のCPUです。
これらは(SSE3のような)命令をサポートしますが、<c>-march</c>では有効になりません。
これらのCPUについては、<c>cat /proc/cpuinfo</c>の出力を確認した後に、
ふさわしい追加フラグを有効にする必要があるでしょう。
</p>

<note>
x86とx86-64特有のフラグの<uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/i386-and-x86_002d64-Options.html#i386-and-x86_002d64-Options">リスト</uri>
を確認しましょう。
-marchで適切にCPUを指定することによって、どの命令セットが有効になるのか確認することができます。
もし命令がリストの中にあったら、改めて指定する必要はありません。
なぜならそれらは正しい<c>-march</c>を使えば有効になるでしょうから。
</note>

</body>
</section>
</chapter>

<chapter>
<title>最適化FAQ</title>
<section>
<title>-funroll-loopsや-fomg-optimizeを使ったら早くなったんだけど！</title>
<body>

<p>
いいえ違います。フラグを付け加えれば付け加えるほど最適化されると言う誰かに騙されて、
してやったと勘違いしているだけです。
システム全体で挑戦的なフラグを使うことはあなたのアプリケーションを傷つけるでしょう。
<c>gcc</c> <uri
link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Optimize-Options.html#Optimize-Options">マニュアル</uri>では<c>-funroll-loops</c>と<c>-funroll-all-loops</c>を使うとバイナリは大きくなり、
実行も遅くなると述べています。
またいくつかの理由から、これらの二つのフラグと同時に、
<c>-ffast-math</c>や<c>-fforce-mem</c>や<c>-fforce-addr</c>などの似たようなフラグが、
速度を最大限誇示したい人たちの間で、
とても人気を博しています。
</p>

<p>
ここで本当に問題なのは、これらのフラグは危険なほどに挑戦的なフラグということです。
それらのフラグが何をやらかしているのか、<uri link="http://forums.gentoo.org">Gentoo Forums</uri>
と<uri link="http://bugs.gentoo.org">Bugzilla</uri>あたりをよく見てください。
ろくなことないですよ！
</p>

<p>
それらのフラグをCFLAGSやCXXFLAGSに設定し、システム全体で使う必要はありません。
それらはパフォーマンスに悪影響を及ぼすだけでしょう。
それらのフラグが、
最先端でハイパフォーマンスなシステムを使っているかのように見せるかもしれませんが、
しかしそれらは何の効果もないどころか、バイナリのサイズが膨れ上がり、バグ報告は無効(INVALID)や修正の必要無し(WONTFIX)として処理されます。
</p>

<p>
あなたはそのような危険なフラグを使う必要はありません。<b>使わないでください。</b>
<c>-march</c>、<c>-O</c>、<c>-pipe</c>という基本を守り通してください。
</p>

</body>
</section>
<section>
<title>3より高い-Oレベルはどう？</title>
<body>

<p>
何人かのユーザーが、<c>-O4</c>や<c>-O9</c>などを使うことによってもっといいパフォーマンスを得たと誇張していますが、3より高い<c>-O</c>レベルは何の効果もありません。
コンパイラは<c>-O4</c>のようなCFLAGSも許容するでしょうが、それらは実質何もしないのです。
<c>-O3</c>の最適化を行うだけで、それ以上の最適化はしません。
</p>

<p>
もっと証拠が必要ですか？<c>gcc</c>の<uri
link="http://gcc.gnu.org/viewcvs/trunk/gcc/opts.c?revision=124622&amp;view=markup">ソースコード
</uri>を確認すると:
</p>

<pre caption="-O フラグ部分のソースコード">
if (optimize >= 3)
    {
      flag_inline_functions = 1;
      flag_unswitch_loops = 1;
      flag_gcse_after_reload = 1;
      /* Allow even more virtual operators.  */
      set_param_value ("max-aliased-vops", 1000);
      set_param_value ("avg-aliased-vops", 3);
    }
</pre>

<p>
見てのとおり、3より高いレベルであっても、結局<c>-O3</c>として扱われます。
</p>

</body>
</section>
<section>
<title>冗長なフラグ指定はどう？</title>
<body>

<p>
しばしば、<path>/etc/portage/make.conf</path>の中で、個々の<c>-O</c>レベルを指定すれば有効になるフラグを
重複してCFLAGSやCXXFLAGSに設定していることがあります。
これは時々よく知らずにやってしまうのですが、
一方で(ebuildが行う)フラグの除去や置換を回避する為に行われることがあります。
</p>

<p>
フラグの除去や置換はPortageツリーの中にある多くのebuildで行われています。
大抵は、特定の<c>-O</c>レベルでパッケージをコンパイルすると失敗するため、
もしくは、フラグを追加すると、そのソースコードでは問題が出るからです。
ebuildはどちらの場合も、全部/一部のCFLAGSとCXXFLAGSを除外するか、
もしくは異なる<c>-O</c>レベルに置換するでしょう。
</p>

<p>
<uri
link="http://devmanual.gentoo.org/ebuild-writing/functions/src_compile/build-environment/index.html">Gentoo開発者マニュアル</uri>にフラグの除去と置換がどんな場合にどうやって使われているのか、あらましがあります。
</p>

<p>
重複してフラグを設定することによって、ある程度は<c>-O</c>に対するフラグ除去を回避することができます。例えば、<c>-O3</c>であれば、次のようにします:
</p>

<pre caption="重複してCFLAGSを設定">
CFLAGS="-O3 -finline-functions -funswitch-loops"
</pre>

<p>
しかしながら、<brite>これは賢いやり方ではありません</brite>。
CFLAGSは理由があって除去されるのです！
フラグが除去されるとき、
それらのフラグでパッケージをビルドすると安全でないことを意味します。
明らかに分かっているのは、
<c>-O3</c>でシステム全体をコンパイルすることは<e>安全ではない</e>という事です。
そうすると、<c>-O3</c>の最適化で有効になるいくつかのフラグによって問題となるパッケージが出てくるでしょう。
そのため、それらのパッケージをメンテナンスしている開発者の"裏をかく"ことを試みるべきではありません。
<e>開発者を信用してください</e>。
フラグの除去と置換はあなたの利益になるから行われているのです！
もしebuildに代替のフラグが指定されているなら、それを回避しようとしないでください。
</p>

<p>
開発者が許可していないフラグでパッケージをビルドすれば、
大概は数々の問題に陥り続けることでしょう。
Bugzillaに不具合を報告する際には、
<path>/etc/portage/make.conf</path>で使っているフラグは容易く見抜かれてしまうので、
余計なフラグを除いて再コンパイルする様に開発者に指示されるでしょう。
初めから冗長なフラグを指定しないことで、再コンパイルする手間を省いてください！
あなたが開発者よりよく知っていると根拠なく無意識に決めつけないでください。
</p>

</body>
</section>
<section>
<title>LDFLAGSはどう？</title>
<body>

<p>
Gentoo開発者がすでに基本的で安全なLDFLAGSを基本プロファイルにセットしているので、
それらを変更する必要はありません。
</p>

</body>
</section>
<section>
<title>パッケージごとにフラグを変更出来るの？</title>
<body>

<warn>
パッケージごとにフラグを変更するとデバッグやサポートが込み入ってきます。
もしこの機能を使っている場合には、どんな変更をしたのか、バグレポートで言及してください。
</warn>

<p>
パッケージごとに(CFLAGSを含む)環境変数を変更する方法は、<uri
link="/doc/ja/handbook/handbook-amd64.xml?part=3&amp;chap=6#doc_chap2">Gentoo
ハンドブックの"パッケージごとの環境変数"</uri>で説明しています。
</p>

</body>
</section>
</chapter>

<chapter>
<title>資料</title>
<section>
<body>

<p>
以下のいくつかの資料が更に最適化について理解する助けになるでしょう:
</p>

<ul>
  <li>
    <uri link="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/">GNU gccマニュアル</uri>
  </li>
  <li>
    <uri link="/doc/en/handbook/">Gentooインストールハンドブック</uri>の第５章
  </li>
  <li><c>man make.conf</c></li>
  <li><uri link="http://ja.wikipedia.org">Wikipedia</uri></li>
  <li><uri link="http://forums.gentoo.org">Gentooフォーラム</uri></li>
</ul>

</body>
</section>
</chapter>
</guide>
