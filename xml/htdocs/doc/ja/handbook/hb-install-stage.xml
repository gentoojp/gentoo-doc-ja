<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- Translator: takeda,nakano,matsuba,naota -->
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/handbook/hb-install-stage.xml,v 1.23 2014/11/28 05:46:42 naota Exp $ -->

<sections>

<abstract>
Gentooのインストールはstage3アーカイブで行います。
この章ではどのようにstage3アーカイブを展開して、Portageを設定するかを説明します。
</abstract>

<version>20</version>
<date>2013-12-17</date>
<!-- Original revision: 1.135 -->

<section>
<title>stage3アーカイブのインストール</title>
<subsection>
<title>日時を設定する</title>
<body>

<p>
まずはじめに日時を確認して、更新しておく必要があります。
狂った時計は後でおかしな結果が起きる元になります。
</p>

<p>
現在の日時を確認するには、<c>date</c>を実行してください。
</p>

<pre caption="日時を確認する">
# <i>date</i>
Fri Mar 29 16:21:18 UTC 2005
</pre>

<p>
もし表示された日時が間違っていたら、<c>date MMDDhhmmYYYY</c>を使って更新してください。
構文としては、(<b>M</b>onth(月)、<b>D</b>ay(日)、<b>h</b>our(時)、<b>m</b>inute(分)、<b>Y</b>ear(年)を表しています)。
この時点ではUTC時間を使用すべきです。自分のタイムゾーンには後で設定することができます。
例えば、2005年3月29日 16:21を設定したい場合には以下のように実行します。
</p>

<pre caption="UTC時間の設定">
# <i>date 032916212005</i>
</pre>

</body>
</subsection>
<subsection>
<title>stage3アーカイブの選択</title>
<body>

<p>
次に<e>stage3</e>アーカイブをインストールします。
stage3アーカイブはアーキテクチャごとに分かれているため、どれをダウンロードするべきか迷うかもしれません。
その時は<c>uname -m</c>を実行して、システムのアーキテクチャを確認するとよいでしょう。
</p>

</body>
</subsection>
</section>
<section>
<title>インターネットからダウンロードしたstage3アーカイブを使う</title>
<subsection>
<title>stage3アーカイブのダウンロード</title>
<body>

<p>
Gentooをインストールしようとしているファイルシステムのマウントポイントに移動してください。
(大抵は<path>/mnt/gentoo</path>でしょう)
</p>

<pre caption="マウントポイントに移動
">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
インストールに使用しているメディアによりますが、stage3アーカイブをダウンロードするツールがいくつか用意されています。
もし<c>links</c>が使用可能なら、すぐにでも<uri link="/main/en/mirrors.xml">ミラーリスト</uri>にアクセスして、最寄のミラーを選択することができます。
<c>links http://www.gentoo.org/main/en/mirrors.xml</c>と入力してEnterを押してください。
</p>

<p>
もし<c>links</c>を使えない場合には、<c>lynx</c>が使用できるでしょう。
プロキシを使う必要がある場合には、環境変数の<c>http_proxy</c>と<c>ftp_proxy</c>を設定してください。
</p>

<pre caption="lynxのプロキシ設定">
# <i>export http_proxy="http://proxy.server.com:port"</i>
# <i>export ftp_proxy="http://proxy.server.com:port"</i>
</pre>

<p>
ここから先は<c>links</c>が使用できると仮定して説明します。
</p>

<p>
近場のミラーを選択してください。通常はHTTPミラーで問題ありませんが、他のプロトコルも同じように利用できます。
<path><keyval id="release-dir"/></path>ディレクトリにアクセスしてください。
あなたのアーキテクチャ向けのstageファイル(もしかしたら、それらは個別のサブアーキテクチャ名のディレクトリ配下に置かれているかもしれません)を見ることができるはずです。
その中から一つを選び、<c>D</c>をおしてダウンロードしましょう。ダウンロードが完了したら、<c>Q</c>を押してlinksを終了させます。
</p>

<p test="'x86'=func:keyval('arch')">
ほとんどのPCユーザーは<b><keyval id="stage3"/></b> stage3アーカイブを使います。
最近のPCはすべてi686です。もし古いマシンを使っているなら、
Wikipediaの<uri link="http://ja.wikipedia.org/wiki/I686">i686互換のプロセッサー一覧</uri>で確認できます。
Pentium、K5、K6やVia C3のような古いプロセッサーはさらに一般的な<b>x86</b> stage3が必要です。
<b>i486</b>より古いプロセッサーはサポートされていません。
</p>

<pre caption="linksでミラーリストを見る">
# <i>links http://www.gentoo.org/main/en/mirrors.xml</i>

<comment>(linkでproxyが必要な場合)</comment>
# <i>links -http-proxy proxy.server.com:8080 http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

<p>
<b>stage3</b>アーカイブをダウンロードするようにして下さい。今後stage1やstage2のtarballを用いたインストールはサポートされません
(もっとも、正規のダウンロードミラーでstage1やstage2のtarballを見つけることはまずないでしょう)。
</p>

<p>
ダウンロードしたstage3アーカイブの完全性を確認したいなら、
<c>openssl</c>を使って、その出力とミラーで配布されているチェックサムを比較してください。
digestsファイルにはいくつかの異なったアルゴリズムで計算されたチェックサムが載っています。
その中で推奨されているのはSHA512とWhirlpoolです。</p>

<pre caption="stage3アーカイブのチェックサムを計算する">
<comment>## SHA512チェックサムを計算</comment>
# <i>openssl dgst -r -sha512 <keyval id="stage3" /></i>
<comment>or</comment>
# <i>sha512sum <keyval id="stage3" /></i>

<comment>## Whirlpoolチェックサムを計算</comment>
# <i>openssl dgst -r -whirlpool <keyval id="stage3" /></i>
</pre>

<p>
そしてこれらのコマンドの出力とミラーサイトの.DIGESTSファイルに書かれた値を比較します。
もし値が一致しなければ、ダウンロードしたファイルが壊れている(もしくはdigestsファイルが壊れている)かもしれません。
</p>

<p>
ISOファイルをダウンロードしたときと同様に、
<path>.DIGESTS.asc</path>ファイルの署名を<c>gpg</c>で検証することで、
チェックサムが改ざんされていないことを確認することもできます。</p>

<pre caption="gpgでチェックサムを検証する">
# <i>gpg --verify <keyval id="stage3" />.DIGESTS.asc</i>
</pre>

</body>
</subsection>
<subsection>
<title>stage3アーカイブの展開</title>
<body>

<p>
さあ、それではダウンロードしたstage3アーカイブをシステムに展開しましょう。
もっとも簡単な方法として、<c>tar</c>を使います。
</p>

<pre caption="stage3アーカイブの展開">
# <i>tar xvjpf stage3-*.tar.bz2</i>
</pre>

<p>
上記と同様のオプション(<c>xvjpf</c>)を必ず使うようにしてください。<c>x</c>は<e>アーカイブの展開</e>、
<c>v</c>は<e>展開中に何が起こっているのかを表示</e>(任意)、<c>j</c>は<e>bzip2の解凍</e>、
<c>p</c>は<e>パーミッションの保存</e>、そして<c>f</c>は、標準入力からではなく、ファイルから展開することを表しています。
</p>

<!-- MIPS uses its own hb-install-stage.xml file, any other arch?
<note>

Some architectures (e.g. MIPS) Installation CDs and boot images rely upon the
<c>tar</c> built into BusyBox which doesn't currently support the <c>v</c>
option. Use the <c>xjpf</c> options instead.
</note>
-->


<p>
これでstage3アーカイブがインストールされました。<uri
link="#compile_options">コンパイルオプションの設定</uri>へ進みましょう。
</p>

</body>

</subsection>
</section>

<section id="compile_options">
<title>コンパイルオプションの設定</title>
<subsection>
<title>はじめに</title>
<body>

<p>
Gentooを最適化するために、Portageの振る舞いに影響を与えるいくつかの変数を設定することができます。
これらの変数は、すべて(<c>export</c>を使用して)環境変数として設定することも可能ですが、
環境変数は永続的なものではありません。設定を保存しておくために、Portageの設定ファイル<path>/etc/portage/make.conf</path>があります。
これが今から編集するファイルです。
</p>

<note>
設定可能なすべての変数は、<path>/mnt/gentoo/usr/share/portage/config/make.conf.example</path>にコメント付きで列挙されています。
Gentooのインストールを成功させるには、次に挙げられている変数を設定するだけで大丈夫です。
</note>

<p>
このあとで説明する設定を編集するために、
お好みのエディタを立ち上げてください(このガイドでは<c>nano</c>を使います)。
</p>

<pre caption="/etc/portage/make.confを開く">
# <i>nano -w /mnt/gentoo/etc/portage/make.conf</i>
</pre>

<p>
おそらく気づいていると思いますが、<path>make.conf.example</path>ファイルは
一般的な文法で書かれています。
"#"で始まる行はコメントで、その他の行には、<c>VARIABLE="content"</c>という構文で変数を定義します。
いくつかの変数については、次の節で解説します。
</p>

</body>
</subsection>
<subsection>
<title>CFLAGSとCXXFLAGS</title>
<body>

<p>
<c>CFLAGS</c>と<c>CXXFLAGS</c>変数には、それぞれ、CおよびC++コンパイラである<c>gcc</c>に対する最適化のためのフラグを定義します。
各々のプログラムに合わせてこれらのフラグを最適化することで、最大のパフォーマンスを得る事が出来ますが、ここではおおまかに設定します。その理由は、全てのプログラムは別物だからです。</p>

<p>
<path>make.conf</path>には、<e>一般的には</e>システム全体の動作を損なわない範囲で最善の最適化フラグを定義すべきです。
この変数に、実験的な設定をしないでください。
過剰な最適化はプログラムの動作をおかしくします(クラッシュや誤動作の元です)。
</p>

<p>
すべての最適化オプションを説明はしません。
そのすべてを知りたいなら、<uri link="http://gcc.gnu.org/onlinedocs/">GCCのオンラインドキュメント</uri>や
<c>gcc</c>のinfo(<c>info gcc</c> -- このコマンドは既に稼動しているLinuxシステムでのみ動作します)を読んでください。
<path>make.conf.example</path>ファイルにもたくさんの例や情報が含まれています。
こちらも忘れずに読んでください。
</p>

<p test="not(contains('AMD64 x86', func:keyval('arch')))">
はじめに<c>-march=</c>もしくは<c>-mcpu=</c>フラグを設定してください。
これには、ターゲットとするアーキテクチャの名前を指定します。
どんなオプションを設定できるかは、<path>make.conf.example</path>ファイルにコメントとして書かれています。
よく使われる値に<e>native</e>があり、これはコンパイルを実行するマシンに合ったアーキテクチャを選ぶようコンパイラに指示します。
</p>

<p test="contains('AMD64 x86',func:keyval('arch'))">
はじめに<c>-march=</c>もしくは<c>-mtune=</c>フラグを設定してください。
これには、ターゲットとするアーキテクチャの名前を指定します。
どんなオプションを設定できるかは、<path>make.conf.example</path>ファイルにコメントとして書かれています。
よく使われる値に<e>native</e>があり、これはコンパイルを実行するマシンに合ったアーキテクチャを選ぶようコンパイラに指示します。
</p>

<p>
次に、<c>-O</c>フラグ(これは大文字のOで、ゼロではありません)を設定します。
これは、<c>gcc</c>の最適化クラスのフラグです。
<c>s</c>(サイズの最適化)、<c>0</c>(最適化なし)、そして、スピードの最適化フラグ<c>1</c>、<c>2</c>、さらに<c>3</c>までが指定できます
(各クラスは一つ前のクラスの最適化に加え、さらに追加の最適化を行います)。
<c>-O2</c> が推奨の指定です。<c>-O3</c>をシステム全体で使用した場合には
問題が発生することが分かっていますので、<c>-O2</c>にとどめておくことをお勧めします。
</p>

<p>
他の人気がある最適化フラグとして<c>-pipe</c>(コンパイル時の様々な段階間の情報のやり取りに、テンポラリファイルではなくパイプを使う)があります。
これは生成されるコードには影響しませんが、より多くのメモリが使われます。メモリが少ないシステムでは、gccが異常終了してしまうかもしれません。
そういった場合には、このフラグを使わないでください。
</p>

<p>
<c>-fomit-frame-pointer</c>(フレームポインタを必要としない関数に対しては、これをレジスタに保存しない)を使うと、
アプリケーションのデバッグが非常に困難になります。
</p>

<p>
<c>CFLAGS</c>と<c>CXXFLAGS</c>を定義するとき、
いくつかの最適化フラグを組み合わせることになるでしょう。
展開したstage3アーカイブに含まれるデフォルトの設定は十分に最適化されています。
下記の例は、あくまで例です。
</p>

<pre test="not(contains('AMD64 arm', func:keyval('arch')))" caption="CFLAGSとCXXFLAGSの設定">
CFLAGS="<keyval id="CFLAGS"/>"
<comment># 両方とも同じ値を使います</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<pre test="func:keyval('arch')='AMD64'" caption="CFLAGSとCXXFLAGSの設定">
CFLAGS="<keyval id="CFLAGS"/>"   <comment># Intel EM64Tユーザーは-march=core2を使用します</comment>
<comment># 両方とも同じ値を使います</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<pre test="func:keyval('arch')='arm'" caption="CFLAGSとCXXFLAGSの設定">
CFLAGS="<keyval id="CFLAGS"/>   <comment># -marchをCPUの種類にあわせて必ず変更してください</comment>
<comment># 両方とも同じ値を使います</comment>
CXXFLAGS="${CFLAGS}"
</pre>

<note>
様々なコンパイルオプションがシステムに与える影響について、
<uri link="https://wiki.gentoo.org/wiki/GCC_optimization">Compilation Optimization Guide</uri>
<uri link="https://wiki.gentoo.org/wiki/GCC_optimization/ja">(日本語訳)</uri>を見てみるのもよいでしょう。
</note>

</body>
</subsection>
<subsection>
<title>MAKEOPTS</title>
<body>

<p>
<c>MAKEOPTS</c>には、パッケージをインストールするときに、
いくつ平行してコンパイルを走らせるかを定義します。
あなたのシステムのCPU数(またはCPUコア数)に1を加えた数を指定するのが賢明ですが、
これは目安であり常にそれが最善であるというわけではありません。
</p>

<pre caption="一般的な、CPUが1個のシステムに対するMAKEOPTS">
MAKEOPTS="-j2"
</pre>

</body>
</subsection>
<subsection>
<title>さぁ準備ができました。次へ進みましょう!</title>
<body>

<p>
<path>/mnt/gentoo/etc/portage/make.conf</path>をあなたの好みに応じて編集し、保存してください。
(<c>nano</c>ユーザは、<c>Ctrl-X</c>を押します)
それでは、<uri link="?part=1&amp;chap=6">Gentooベースシステムのインストール</uri>へ進んでください。
</p>

</body>
</subsection>
</section>
</sections>
