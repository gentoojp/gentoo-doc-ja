<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/handbook/hb-net-advanced.xml,v 1.9 2014/06/05 03:48:04 naota Exp $ -->

<!-- Original revision: 1.23 -->
<!-- Translator: igarashi -->
<!-- Translator: naota -->

<sections>

<abstract>
ここでは設定がどのように働くのか学びます。
モジュラーネットワーキングについて学ぶ前に、知っておく必要あります。
</abstract>

<version>16</version>
<date>2014-04-12</date>

<section>
<title>高度な設定</title>
<body>

<p>
<c>config_eth0</c>変数が、インターフェースの設定の要です。
config_eth0は、インターフェース(この場合は<c>eth0</c>)設定用の高度な設定値のリストです。
設定値のリストに含まれる各コマンドは、順に実行されます。
一つでもコマンドが動作すれば、そのインターフェースは正常であると判断されます。
</p>

<p>
以下は、あらかじめ備わっている設定値のリストです。
</p>

<table>
  <tr>
    <th>コマンド</th>
    <th>説明</th>
  </tr>
  <tr>
    <ti><c>null</c></ti>
    <ti>何もしません</ti>
  </tr>
  <tr>
    <ti><c>noop</c></ti>
    <ti>
      インターフェースが有効になっていてアドレスが割り当てられていたならば、
その時はこの設定を無視します
    </ti>
  </tr>
  <tr>
    <ti>IPv4かIPv6のアドレス</ti>
    <ti>インターフェースに指定されたアドレスを追加します</ti>
  </tr>
  <tr>
    <ti>
      <c>dhcp</c>、<c>adsl</c>、<c>apipa</c>(もしくはサードパーティのモジュールが要求するカスタムコマンド)
    </ti>
    <ti>
      コマンドを供給するモジュールを実行します。例えば<c>dhcp</c>は、<c>dhcpcd</c>、<c>dhclient</c>、<c>pump</c>のうちのどれか一つである、DHCP機能を提供するモジュールを実行します。
    </ti>
  </tr>
</table>

<p>
一つのコマンドが失敗した場合に備えて、一つの予備のコマンドを指定することができます。
予備のコマンド(fallback)も、これらの設定の形式に正確に適合している必要があります。
</p>

<p>
これらのコマンドを繋げて同時に指定できます。実際に使用されるいくつかの例を示します。
</p>

<pre caption="設定例">
<comment># 以下のIPv4アドレスを追加します</comment>
config_eth0="192.168.0.2/24
192.168.0.3/24
192.168.0.4/24"

<comment># 一つのIPv4アドレスと二つのIPv6アドレスを追加します</comment>
config_eth0="192.168.0.2/24
4321:0:1:2:3:4:567:89ab
4321:0:1:2:3:4:567:89ac"

<comment># 既にインターフェースが有効になっていて、アドレスが割り当ててある場合は、何もしません。
# インターフェースが無効になってしまっている場合、DHCP経由の新たなアドレスを割当てます。</comment>
config_eth0="noop
dhcp"
fallback_eth0="null
apipa"
</pre>

<note>
<c>ifconfig</c>モジュールを使用して一つ以上のアドレスを追加する場合、二つ目以降のアドレスの各々に対しインターフェースの別名が生成されます。
よって上二つの例では、インターフェース<c>eth0</c>、<c>eth0:1</c>、<c>eth0:2</c>が得られます。
カーネルとその他プログラムが<c>eth0</c>として<c>eht0:1</c>と<c>eth0:2</c>を扱う場合、これらのインターフェースでは何も特別なことはできません。
</note>

<impo>
fallback順は重要です! <c>null</c>オプションを指定していないと、<c>apipa</c>コマンドは、<c>noop</c>コマンドが失敗したときだけ実行されます。
</impo>

<note>
<uri link="?part=4&amp;chap=3#apipa">APIPA</uri>と<uri
link="?part=4&amp;chap=3#dhcp">DHCP</uri>については後で記述します。
</note>

</body>
</section>

<section>
<title>ネットワーク依存設定</title>
<body>

<p>
<path>/etc/init.d</path>にあるinitスクリプトは、特定のネットワークインターフェース、もしくはただ単にnetに依存することがあります。
Gentooのinitシステムに含まれるすべてのネットワークインターフェイスは、<e>net</e>という仮想的なサービスを提供します。
</p>

<p>
もし<path>/etc/rc.conf</path>内で<c>rc_depend_strict="YES"</c>と設定されているのであれば、netを提供するすべてのネットワークインターフェイスは"net"への依存が想定される前に有効になっている必要があります。
言い換えると、もし<path>net.eth0</path>と<path>net.eth1</path>があって、initスクリプトが"net"に
依存しているのであれば、両方とも有効になっていなければなりません。
</p>

<p>
一方で、もし<c>rc_depend_strict="NO"</c>と設定されているのであれば、
少なくとも1つのネットワークインターフェイスが開始されたときに"net"への依存は解決されていると解釈されます。　
</p>

<p>
ですが、<path>net.eth0</path>と<path>net.eth1</path>に依存している<path>net.br0</path>の場合はどうでしょうか。
<path>net.eth1</path>は、ブリッジに追加する前に設定される必要がある無線もしくはPPPデバイスかもしれません。
その場合、<path>net.lo</path>へのシンボリックリンクとしての<path>/etc/init.d/net.br0</path>では実現できません。
</p>

<p>
この状況への答えは、<path>/etc/conf.d/net</path>内の<c>rc_need_</c>を定義することです。
</p>

<pre caption="/etc/conf.d/netでのnet.br0の依存設定">
rc_need_br0="net.eth0 net.eth1"
</pre>

<p>
しかしながら、これだけでは十分ではありません。
Gentooのネットワークに関するinitスクリプトはネットワーク利用可能時に、これをシステムへ通知するため<e>net</e>というvirtual依存を使用します。
上記の場合では明らかに、他ではなく<path>net.br0</path>が開始されているときのみに、ネットワークが利用可能だと解釈されなければなりません。
そのためにその旨を<path>/etc/conf.d/net</path>に追記する必要があります。
</p>

<pre caption="virtual依存をアップデートしてネットワークを設定する
">
rc_net_lo_provide="!net"
rc_net_eth0_provide="!net"
rc_net_eth1_provide="!net"
</pre>

<p>
依存関係についての詳しい解説は、Gentooハンドブックの<uri
link="?part=2&amp;chap=4#doc_chap4">Writing Init Scripts</uri>を参照してください。
<path>/etc/rc.conf</path>に関しての詳細もそのファイルのコメント欄に記述されています。
</p>

</body>
</section>

<section id="variable_name">
<title>変数名と値</title>
<body>

<p>
変数名は可変です。
通常は<c>variable_${interface|mac|essid|apmac}</c>の形式に従っています。
例えば、変数<c>dhcpcd_eth0</c>は、eth0のdhcpcdオプションの値を保持しますし、<c>dhcpcd_essid</c>は、どれかのインターフェースがESSIDアクセスポイント"essid"に接続したときのdhcpcdオプションの値を保持します。
</p>

<p>
しかし、インターフェースの名前が必ずethxでなければならないといっているわけではありません。
実際、多くの無線インターフェースは、ethxと同じようにwlanx、raxのような名前です。
さらに、ブリッジのようなユーザ定義のインターフェースは、fooなどのように任意の名前を付けることもできます。
よりわかりやすいように、無線アクセスポイントは、アルファベットや数字以外の文字を使った名前にできます。このことはESSID毎にネットワークパラメータの設定を可能にするために、とても重要です。
</p>

<p>
このことに関して何より弱点なのは、Gentooはネットワーク接続に関してbash変数を使うことです。
そしてbashは英字のアルファベットと数字以外は使用できません。
この制限を回避するために、英字のアルファベットと数字ではない全ての文字を<c>_</c>(アンダースコア)に変換します。
</p>

<p>
もう一つのbashの弱点は、変数の内容に関してです。
一部の文字はエスケープされてしまいます。
これは、エスケープされる必要がある文字の前に<c>\</c>(バックスラッシュまたは円記号)を置くことで回避できます。次の文字は、この方法でエスケープする必要があります。<c>"</c>と<c>'</c>と<c>\</c>。
</p>

<p>
この例では、特殊な文字を使用する無線ESSIDを使用しています。
この場合、以下のようにESSID <c>My "\ NET</c>を使用することになります。
</p>

<pre caption="変数名の例">
<comment>（これは機能しますが、ドメイン名としては不正です）</comment>
dns_domain_My____NET="My "\\ NET"

<comment>（上記は、無線LANカードがMy "\ NETのESSIDを持つアクセスポイン
トに接続した場合、dnsドメインをMy "\ NETに設定します）</comment>
</pre>

</body>
</section>
<section>
<title>ネットワークインタフェースの名付け方</title>
<subsection>
<title>どのように動くのか</title>
<body>

<p>
ネットワークインタフェースの名前は任意に選ばれているわけではありません。
Linuxカーネルとデバイスマネージャ(ほとんどのシステムではudevを使っていますが、
他のものも存在しています)が、決まったルールに基づいてインタフェースの名前を決定します。
</p>

<p>
システムにインタフェースカードが検出されると、Linuxカーネルはこのカードについて必要な情報を収集します。
この情報には以下のものがふくまれます</p>

<ol>
  <li>
    オンボード(ネットワークカード自体)に登録されている名前。
    これは <c>ID_NET_NAME_ONBOARD</c> パラメータで参照することができます。</li>
  <li>
    ネットワークカードが接続されているスロット。
    これは <c>ID_NET_NAME_SLOT</c> で参照することができます。</li>
  <li>
    ネットワークカードデバイスにアクセスするためのパス。
    <c>ID_NET_NAME_PATH</c> で参照することができます。</li>
  <li>
    (ベンダーが提供している)ネットワークカードのMACアドレス。
    これは <c>ID_NET_NAME_MAC</c> で参照できます。</li>
</ol>

<p>
これらの情報からデバイスマネージャはシステム上のネットワークインタフェースを、
どのように名付けるかを決定します。デフォルトでは上記の最初の3つのパラメータ
(<c>ID_NET_NAME_ONBOARD</c>, <c>_SLOT</c> or <c>_PATH</c>)から、
最初にヒットしたものを選択します。 たとえば、<c>ID_NET_NAME_ONBOARD</c>が <c>eno1</c> と設定されていれば、
そのインタフェースはeno1と呼ばれます。</p>

<p>
インターフェースの名前がわかっていれば、設定されているパラメータを<c>udevadm</c>
コマンドを使って見ることができます。</p>

<pre caption="ネットワークインタフェースカードの情報を読む">
# <i>udevadm test-builtin net_id /sys/class/net/enp3s0 2>/dev/null</i>
ID_NET_NAME_MAC=enxc80aa9429d76
ID_OUI_FROM_DATABASE=Quanta Computer Inc.
ID_NET_NAME_PATH=enp3s0
</pre>

<p>
上記の3つのパラメータのうち最初にヒットする(実際には唯一の)パラメータが<c>ID_NET_NAME_PATH</c> なので、
その値がインタフェースの名前として使用されます。どのパラメータも設定されていなければ、
システムはカーネルが提供している名前(eth0、eth1など)を使用するようにフォールバックします。</p>

</body>
</subsection>
<subsection>
<title>古くからのカーネルの名前付けを使う</title>
<body>

<p>
以上の変更が入る前までは、ネットワークインタフェースカードの名前はLinuxカーネルによって、
ドライバが読みこまれる順番で(他にもよりあいまいな理由はあります)決定されていました。
<c>net.ifnames=0</c>のブートパラメータを使うことで、この動作をいまでも有効にすることができます。
</p>

</body>
</subsection>
<subsection>
<title>自分で付けた名前を使う</title>
<body>

<p>
名前の付け方の変更の理由は人々を混乱させるためではなく、名前の変更を簡単にするためでした。
いままではeth0、eth1と名付けられていた2つのインタフェースがあるとします。
一つはケーブルを使って、もう一つはワイアレスでネットワークにアクセスするとします。
インタフェースの名前を付けられるようになったので、
これらをlan0(ケーブルを使用)、wifi0(ワイアレス)と名付けることができます。
eth*やwlan*といった以前によく使われていた名前は、依然として衝突する可能性があるので避ける方が良いです。
</p>

<p>
まずカードに設定されているパラメータがどうなっているのかを確認し、その情報を使って名前付けのルールを設定します。</p>

<pre caption="いまのeth0にlan0という名前を付ける">
# <i>udevadm test-builtin net_id /sys/class/net/eth0 2>/dev/null</i>
ID_NET_NAME_MAC=enxc80aa9429d76
ID_OUI_FROM_DATABASE=Quanta Computer Inc.

# <i>vim /etc/udev/rules.d/76-net-name-use-custom.rules</i>
<comment># 一つ目はMACの情報を使います</comment>
SUBSYSTEM=="net", ACTION=="add", ENV{ID_NET_NAME_MAC}=="enxc80aa9429d76", NAME="lan0"
<comment># 二つ目はID_NET_NAME_PATHの情報を使います</comment>
SUBSYSTEM=="net", ACTION=="add", ENV{ID_NET_NAME_PATH}=="enp3s0", NAME="wifi0"
</pre>

<p>
このルールはデフォルトのルールよりも前に適用される(ルールはアルファベット順に適用されるので、
70が80よりも前に適用される)ので、このルールファイルがデフォルトの代わりに適用されます。
ファイルに付けられる番号は76から79の間であるべきです。
(ルールで使われる環境変数は75で始まるルールで設定され、フォールバックの名前付けは80で行なわれるからです)</p>

</body>
</subsection>
</section>

</sections>
