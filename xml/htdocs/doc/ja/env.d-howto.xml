<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/env.d-howto.xml,v 1.9 2012/04/18 18:30:27 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide>
<title>env.d HOWTO</title>
<author title="Author"><!-- zhen@gentoo.org -->John P. Davis</author>
<author title="翻訳">
<mail link="hagi@p1d.com">萩原佳明</mail>
</author>

<abstract>
	このドキュメントでは、/etc/env.d ディレクトリの意味や使い方、
	そしてディレクトリ内の各ファイルについて説明します。
</abstract>

<license/>

<version>1.6</version>
<date>October 23, 2003</date>
<!-- Original revision: 1.17 -->

<chapter>
	<title>env.d の概要と一般的な変数について</title>
	<section>
		<title>Gentooの基本的な環境変数</title>
		<body>
		<p>
			よく、Gentooユーザーが次のような質問をしているのを見かけます。
			「環境変数はどこで設定されてんの？」「環境変数はどういう風に設定されてんの？」
			このあたりのことを理解するためには、まず、そもそも環境変数が何かということについて知らないといけません。
			環境変数は<c>export</c>コマンドが発行されるたびに設定されます。
			たとえば<c>export EDITOR="/usr/sbin/vim"</c>と実行すると、
			システムに自分のデフォルトエディタがvimだと伝える環境変数を設定したことになります。
			あなたがGentooで設定できる環境変数には多種多様なものがあります。以下に例を示します:
		</p>

		<note>
			<c>export</c>コマンドで設定した環境変数は、現在のシェル*だけではなく*その子プロセスでも有効になります。
			とりあえず変数は指定したいんだけど子プロセスには影響を与えたくない、なんていうときは
			<c>FOO="bar"</c>とすれば良いです。
		</note>

		<note>
			あなたのシステムの<c>00basic</c>ファイルの内容は、以下と異なっているかもしれません。でも大丈夫です。以下に示すのは、
			Gentooが提供するデフォルトのものです。
		</note>

		<note>
			以下の例は<path>/etc/env.d/00basic</path>で見ることができます。
		</note>

		<table>
		<tr>
			<th>変数名</th>
			<th>その役割</th>
		</tr>
		<tr>
			<ti>PATH</ti>
			<ti>
			プログラムを検索するときに用いられる、デフォルトのパスです。「:」で区切ります。
			<c>PATH=/usr/local/bin:/opt/bin</c>のように設定されます。
			</ti>
		</tr>
		<tr>
			<ti>ROOTPATH</ti>
			<ti>
			上のPATHと似ていますが、<c>root</c>が使用するプログラムのデフォルトパスです。
			<c>ROOTPATH=/usr/local/bin:/opt/bin</c>のように設定されます。
		</ti>
		</tr>
		<tr>
			<ti>LDPATH</ti>
			<ti>
			リンクの際に使われるライブラリのパスを指定します。PATH等と同様「:」で区切ります。
			例えば<c>LDPATH=/usr/local/lib</c>のようになります。
			</ti>
		</tr>
		<tr>
			<ti>MANPATH</ti>
			<ti>
			マシンのどこにマニュアルページが保存されているか指定します。
			<c>PATH</c>と同様のものですがマニュアルページ用です。
			<c>MANPATH=/usr/share/man:/usr/local/share/man</c>という感じです。
			</ti>
		</tr>
		<tr>
			<ti>INFODIR</ti>
			<ti>
			全てのinfo用ファイルが置いてある場所です。
			<c>INFODIR=/usr/share/info</c>のようになります。
			</ti>
		</tr>
		<tr>
			<ti>PAGER</ti>
			<ti>
			例えばlessやmoreなど、ページャとして何を使うかを指定します。
			<c>PAGER=/usr/bin/less</c>という風になるでしょう。
			</ti>
		</tr>
		<tr>
			<ti>EDITOR</ti>
			<ti>
			システムでデフォルトで使うエディタを指定します。例えばこんな感じです:
			<c>EDITOR=/usr/bin/vim</c>
			</ti>
		</tr>
		</table>

		<p>
			以下は<c>00basic</c>ファイルの例です。これは単に、このファイルがどんな感じなのかを示すためのものです。
			ただし、いま使ってる<c>00basic</c>が使いものにならないなら、これをそのまま使うのも良いですね！
		</p>

		<pre caption = "00basic">
# /etc/env.d/00basic:
# $Header: /home/cvsroot/gentoo-src/rc-scripts/etc/env.d/00basic,v 1.11 2003/02/17 02:48:39 azarah Exp &#36;

PATH="/usr/local/bin:/opt/bin"
ROOTPATH="/usr/local/bin:/opt/bin"
LDPATH="/usr/local/lib"
MANPATH="/usr/share/man:/usr/local/share/man"
INFODIR="/usr/share/info"
INFOPATH="/usr/share/info"
CVS_RSH="ssh"
PAGER="/usr/bin/less"
LESSOPEN="|lesspipe.sh %s"
		</pre>
		</body>
	</section>

	<section>
		<title>env.dの構造</title>
		<body>
		<p>
		<c>env.d</c>ディレクトリ以下のファイルは、<c>env-update</c>が実行されたときに正しい順番で変数を設定できるように、
		順番が明確になるようなファイル名になっています。ファイル名の先頭にある数字はどういう順番で各ファイルが解析されるかを表しているので、
		まず最初に<c>00basic</c>が解析され、次に<c>01something</c>が処理され、続いて同じく次のものが、という風になります。
		各ファイルは先程と同様の書式になっています:
		</p>

		<pre caption = "ファイルの書式">
<comment># この行はコメントです。BASHと同じですね。</comment>
<i>VARIABLE1=/path/to/something</i>
<comment># 変数の中には : で区切った値を持つものもあります。</comment>
<i>VAR1A=/path/to/something:/path/to/another/something</i>
<i>VARIABLE2=name_something</i>
		</pre>
		</body>
	</section>
</chapter>

<chapter>
	<title>特殊な変数、そしていかにして各変数はひとつにまとめられるのか</title>
	<section>
		<title>特殊な変数</title>
			<body>
			<p>
				<c>env.d</c>に含まれるものの中には、特殊な変数もあります。
				<c>KDEDIRS、PATH、CLASSPATH、LDPATH、MANPATH、INFODIR、ROOTPATH、CONFIG_PROTECT、
				CONFIG_PROTECT_MASK</c>がそうです。何故これらが特殊なのかというと、あとで説明しますが、
				特別なやり方で処理され、特別なファイルに収められているからです。
			</p>

			<note>
				以下で説明する変数のうちいくつかは、既に上記<c>00basic</c>で既に取り上げたものです。
				素晴しいことに、これらの変数は同じ変数が別々のファイルで使用されていても問題ありません(以下で詳しく説明します)。
			</note>

			<table>
			<tr>
				<th>変数名</th>
				<th>その役割</th>
			</tr>
			<tr>
				<ti>KDEDIRS</ti>
				<ti>
				KDE関連の全てのパス。
				</ti>
			</tr>
			<tr>
				<ti>PATH</ti>
				<ti>
				上に書いた通りで、「:」で区切られます(上記説明を参照のこと)。
				</ti>
			</tr>
			<tr>
				<ti>CLASSPATH</ti>
				<ti>
				Javaの各クラスへのパスをセットします。「:」で区切られます。
				</ti>
			</tr>
			<tr>
				<ti>LDPATH</ti>
				<ti>
				上に書いた通りです(上記説明を参照のこと)。
				</ti>
			</tr>
			<tr>
				<ti>MANPATH</ti>
				<ti>
				先程説明した通り(上記説明を参照のこと)で、「:」区切りです。
				</ti>
			</tr>
			<tr>
				<ti>INFODIR</ti>
				<ti>
				先程説明した通り(上記説明を参照のこと)で、「:」区切りです。
				</ti>
			</tr>
			<tr>
				<ti>ROOTPATH</ti>
				<ti>
				先程説明した通り(上記説明を参照のこと)で、「:」区切りです。
				</ti>
			</tr>
			<tr>
				<ti>CONFIG_PROTECT</ti>
				<ti>
				<path>/etc</path>ディレクトリ中の設定ファイルのうち新しいebuildsで上書きされたくないものを、
				スペース区切りで指定します。
				</ti>
			</tr>
			<tr>
				<ti>CONFIG_PROTECT_MASK</ti>
				<ti>
				基本的にはCONFIG_PROTECTの逆で、<path>/etc</path>中のファイルのうち、
				emerge処理で自動的に変更して欲しいものを指定します。
				</ti>
			</tr>
			</table>
		</body>
	</section>

	<section>
		<title>ぜーんぶ一緒にする</title>
		<body>
			<p>
			さてさて、これで私は全部説明したわけですが、
			あなたは各変数が自分のGentooマシンに一体どう影響するんだか訝しんでることでしょう。
			<c>env.d</c>のスゴさは、変数を変更したいファイルで好きなようにその変数を変更して良いということです。
			そういうことが、嬉しいことにできちゃうんですね。
			</p>

			<p>
			ではどういうことができるのか何となくわかったところで、各変数で何が起こっているのが説明しましょう。
			<c>env-update</c>が実行されると、各ファイルの内容はすべてひとつにまとめられます。
			先程、<c>PATH</c>変数が複数ファイルに記述されても問題ないと言ったこと覚えてますか？　
			どうしてこれで問題ないかというと、<c>env-update </c>が各ファイルを順に走査して各パスを順番に追加してくれるからなのです。
			というわけで、KDE、GNOME、デフォルトの<c>PATH</c>、それからX用のパスをそれぞれ別の<c>PATH</c>で指定していても、
			<c>env-update</c>が各パスをひとつにまとめてくれるので、
			結局でき上がるデフォルトの<c>PATH</c>は各パスがひとつになったものになるわけです。いい感じでしょ？
			</p>

			<p>
			各変数がまとめられることになるので、
			それぞれがどこに保存されているかについて気を付けないといけません。
			</p>

			<note>
			以下のファイルは<c>env-update</c>を実行することで生成されます
			</note>

			<pre caption = "env.d以下のファイルをまとめたもので作られるファイル">
<i>LDPATH ----> /etc/ld.so.conf</i>
<i>CONFIG_PROTECT and CONFIG_PROTECT_MASK ----> /etc/profile.env (exportされた他の変数と同様に)</i>
<i>Specials and Others ----> /etc/profile.env</i>
			</pre>

			<p>
			<path>/etc/ld.so.conf</path>の中をよく見れば、
			その中にある情報は<c>env.d</c>を元にしてできていることがハッキリ分かると思います。
			</p>

			<pre caption = "/etc/ld.so.conf">
# ld.so.conf autogenerated by env-update; make all changes to
# contents of /etc/env.d directory
/usr/local/lib
/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2
/usr/lib/opengl/nvidia/lib
/usr/lib/mozilla
/usr/X11R6/lib
/opt/blackdown-jdk-1.3.1/jre/lib/i386/
/opt/blackdown-jdk-1.3.1/jre/lib/i386/native_threads/
/usr/qt/3/lib
/usr/qt/2/lib
/usr/kde/3/lib
			</pre>

			<p>
			<path>/etc/profile.env</path>がシェルを起動するごとに読み込まれることを知っておくのは良いですね。
			これで、次にログインしたときから新しく設定した変数を全部使えるようになったわけですから。
			</p>

			<pre caption = "env-updateの実行で起こることを順番に">
<i>/etc/env.dでの設定 ---&gt; env-update ---&gt; /etc/profile.env ---&gt; /etc/profile 
---&gt; bash ---&gt; すべてのプログラム</i>
			</pre>

			<p>
			これで<c>profile.env</c>が完成したわけですが、以下のようになっていると思います:
			</p>

			<pre caption = "/etc/profile.env">
<comment>(以下の例では、読みやすくするために複数の行に分けています)</comment>
export CONFIG_PROTECT='/usr/kde/3/share/config /usr/share/config'
export KDEDIRS='/usr/kde/3:/usr'
export MANPATH='/usr/share/man:/usr/local/share/man:/usr/X11R6/man:/opt/blackdown-jdk-1.3.1/man'
export INFODIR='/usr/share/info:/usr/X11R6/info'
export PATH='/usr/local/bin:/opt/bin:/opt/rar/bin:/usr/X11R6/bin:/opt/blackdown-jdk-1.3.1/bin: \ 
/opt/blackdown-jdk-1.3.1/jre/bin:/usr/qt/3/bin:/usr/qt/2/bin:/usr/kde/3/bin'
export CONFIG_PROTECT_MASK='/etc/gconf'
export CLASSPATH='/opt/blackdown-jdk-1.3.1/jre/lib/rt.jar:.'
export ROOTPATH='/usr/local/bin:/opt/bin:/opt/rar:/usr/X11R6/bin:/opt/blackdown-jdk-1.3.1/bin: \ 
/opt/blackdown-jdk-1.3.1/jre/bin:/usr/qt/3/bin:/usr/qt/2/bin:/usr/kde/3/bin'
export KDEDIR='/usr/kde/3'
export VIMRUNTIME='/usr/share/vim/vim61'
export JDK_HOME='/opt/blackdown-jdk-1.3.1'
export JAVAC='/opt/blackdown-jdk-1.3.1/bin/javac'
export PAGER='/usr/bin/less'
export HOSTNAME='l00ser.muc.edu'
export QMAKESPEC='linux-g++'
export LESSOPEN='|lesspipe.sh %s'
export CVS_RSH='ssh'
export EDITOR='/usr/bin/vim'
export QTDIR='/usr/qt/3'
export JAVA_HOME='/opt/blackdown-jdk-1.3.1'
export XINITRC='/etc/X11/xinit/xinitrc'
export MOZILLA_FIVE_HOME='/usr/lib/mozilla'
			</pre>

			<p>
			はい、ではこれで全部です。あとは楽しく、色々やってみてください。ただし「色々」をやり過きないようにね！
			</p>
			</body>
		</section>
	</chapter>
</guide>
