<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/ja/cross-compiling-distcc.xml,v 1.3 2012/04/18 18:30:27 swift Exp $ -->

<guide lang="ja">
<title>DistCC クロスコンパイルガイド</title>

<author title="Author">
  <mail link="agaffney@gentoo.org">Andrew Gaffney</mail>
</author>
<author title="Editor">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="翻訳">
  <mail link="solidsneak@hyper.cx">小林弘樹</mail>
</author>

<abstract>
このガイドでは、distccをつかった異なるプロセッサアーキテクチャ間でのクロスコンパイルを行う方法を説明します。
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.3</version>
<date>2006-02-17</date>

<!-- Original revision: 1.4 -->

<chapter>
<title>distccでのクロスコンパイル</title>
<section>
<title>はじめに</title>
<body>

<p>
<c>distcc</c>とは、ソフトウェアコンパイルの負荷をネットワーク上のコンピュータに分散させるツールです。
ネットワーク上のコンピュータがすべて同じプロセッサアーキテクチャ向けの同じツールチェインビルドを使用していれば、<c>distcc</c>の特別な設定は必要ありません。
しかし、異なるアーキテクチャを使っている別のコンピュータでコンパイルする必要があるときにはどうしますか？
このガイドでは、異なるアーキテクチャで<c>distcc</c>を使ったコンパイルを行うための設定方法を説明します。
</p>

</body>
</section>
<section>
<title>必要なユーティリティのemerge</title>
<body>

<p>
まず、コンパイル行程に関わるすべてのマシンで<c>crossdev</c>をemergeする必要があります。
<c>crossdev</c>は、クロスアーキテクチャツールチェインのビルドを簡単にするツールです。
このオリジナル版は<mail link="kumba@gentoo.org">Joshua Kinard</mail>が作成し、<mail link="vapier@gentoo.org">Mike Frysinger</mail>が改良しました。
この使用方法はわかりやすく、<c>crossdev -t sparc</c>を実行すれば、Sparcアーキテクチャをターゲットにした完全なクロスツールチェインをビルドします。
これには、binutils、gcc、glibc、そしてlinux-headersが含まれます。
より詳しいヘルプが必要なら、<c>crossdev --help</c>を実行してみてください。
言うまでもありませんが、すべてのコンピュータに適切なクロスツールチェインをemergeする必要があります。
</p>

<p>
次に、行程に関わるすべてのマシンで<c>distcc</c>をemergeする必要があります。
これには、emergeを実行するコンピュータとクロスコンパイルを行うコンピュータが含まれます。
<c>distcc</c>の設定方法と使用方法に関するより詳しい情報は、<uri link="/doc/en/distcc.xml">Gentoo Distcc Documentation</uri><uri link="/doc/ja/distcc.xml">(日本語訳)</uri>を参照してください。
</p>

</body>
</section>
<section>
<title>アーキテクチャ特有の注意点</title>
<body>

<p>
Intel x86の異なるサブアーキテクチャ間(たとえば、i586とi686)でクロスコンパイルを行うのなら、必要なCHOSTの完全なクロスツールチェインをビルドしなければ、コンパイルが失敗してしまいます。
これは、i586とi686とは"x86"と見なされるにもかかわらず、実際には異なったCHOSTであるためです。
クロスツールチェインをビルドする際には、このことを覚えておいてください。
たとえば、ターゲットとなるコンピュータがi586なら、i686のコンピュータでi586クロスツールチェインをビルドしなければならないと言うことです。
</p>

</body>
</section>
<section>
<title>クロスコンパイルを正しく行うためにdistccを設定</title>
<body>

<p>
distccの初期設定では、クロスコンパイルは正しく動作<e>しません</e>。
この原因は、多くのビルドが完全なコンパイラ名(<c>sparc-unknown-linux-gnu-gcc</c>など)の代わりに単に<c>gcc</c>を実行しているからです。
このコンパイルがdistcc協力コンピュータへ配信を行う際に、新しいクロスコンパイラの代わりにネイティブコンパイラが呼び出されます。
</p>

<p>
幸運なことに、この小さな問題に対する代替方法があります。
<c>emerge</c>を行うコンピュータでラッパースクリプトといくつかのシンボリックリンクを作成することです。
Sparcコンピュータを例として使用します。
以下の<c>sparc-unknown-linux-gnu</c>というところは、あなた自身のCHOST(例えば、AMD64では<c>x86_64-pc-linux-gnu</c>)に置き換えてください。
初めてdistccをemergeしたら、<path>/usr/lib/distcc/bin</path>ディレクトリは以下のようになっています。
</p>

<note>
以下の指示はemergeを実行するコンピュータでのみ行ってください。
協力コンピュータではこれらの段階を行ってはいけません。
</note>

<pre caption="利用可能なコンパイラ">
# <i>cd /usr/lib/distcc/bin</i>
# <i>ls -l</i>
total 0
lrwxrwxrwx  1 root root 15 Dec 23 20:13 c++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 cc -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 g++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 gcc -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-c++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-g++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-gcc -&gt; /usr/bin/distcc
</pre>

<p>
これが行いたいことです。
</p>

<pre caption="distccの修正">
# <i>rm c++ g++ gcc cc</i>
</pre>

<p>
次に、このコンピュータに新しいスクリプトを作成します。
お気に入りのエディタを起動して、以下のテキストを含むファイルを作成し、<path>sparc-unknown-linux-gnu-wrapper</path>という名前で保存します。
CHOST(この場合は<c>sparc-unknown-linux-gnu</c>)を、emergeを実行するコンピュータの実際のCHOSTに変更することを忘れないでください。
</p>

<pre caption="新しいラッパースクリプト">
#!/bin/bash
exec /usr/lib/distcc/bin/sparc-unknown-linux-gnu-${0##*/} "$@"
</pre>

<p>
次に、スクリプトを実行可能にし、適切なシンボリックリンクを作成します。
</p>

<pre caption="シンボリックリンクの作成">
# <i>chmod a+x sparc-unknown-linux-gnu-wrapper</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper cc</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper gcc</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper g++</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper c++</i>
</pre>

<p>
完了したら、<path>/usr/lib/distcc/bin</path>は以下のようになっているでしょう。
</p>

<pre caption="適切なコンパイラのセット">
# <i>ls -l</i>
total 4
lrwxrwxrwx  1 root root 25 Jan 18 14:20 c++ -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 cc -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 g++ -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 gcc -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-c++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-g++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Jul 27 10:52 sparc-unknown-linux-gnu-gcc -&gt; /usr/bin/distcc
-rwxr-xr-x  1 root root 70 Jan 18 14:20 sparc-unknown-linux-gnu-wrapper
</pre>

<p>
おめでとうございます。
これでcross-distccの設定は完了です。
</p>

</body>
</section>
<section>
<title>動作内容</title>
<body>

<p>
<c>distcc</c>が呼ばれたら、なんと呼ばれたかを確認します(例えば、<c>i686-pc-linux-gnu-gcc</c>や<c>sparc-unknown-linux-gnu-g++</c>など)。
その後、distccがコンパイルを協力コンピュータへ配信するとき、呼び出された名前も一緒に渡します。
その他の協力コンピュータにあるdistccデーモンは同じ名前のバイナリを探します。
もしこれが単に<c>gcc</c>なら、<c>emerge</c>を実行しているコンピュータと異なるアーキテクチャであっても、協力コンピュータのネイティブコンパイラである<c>gcc</c>を探します。
<c>sparc-unknown-linux-gnu-gcc</c>といった<e>完全な</e>コンパイラ名の場合には、混乱は起きません。
</p>

</body>
</section>
</chapter>
</guide>
