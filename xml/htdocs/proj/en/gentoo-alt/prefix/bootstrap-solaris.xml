<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/gentoo-alt/prefix/bootstrap-solaris.xml,v 1.102 2012/10/28 15:21:06 swift Exp $ -->

<guide lang="en">
  <title>Gentoo Prefix Bootstrap Process for UNIX-like systems</title>
  

  <author title="Author">
    <mail link="grobian@gentoo.org">Fabian Groffen</mail>
  </author>

  <abstract>
    How to bootstrap Gentoo Prefix on your UNIX-like system
  </abstract>


  <!-- The content of this document is licensed under the CC-BY-SA license -->
  <!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
  <license/>

  <version>1.71</version>
  <date>2012-09-07</date>

  <chapter>
    <title>Bootstrapping</title>

    <section><!-- {{{ Introduction -->
      <title>Introduction</title>
      <body>
        <p>
          Bootstrapping on a UNIX-like system can range from being
          fairly simple to just a downright disaster.  Systems that
          typically belong to the "simple" group, are Mac OS X, FreeBSD
          and recent distributions of Linux not being SuSE or Ubuntu.
          The "disaster" systems are NetBSD, OpenBSD and Ubuntu: they
          are NOT supported.  Somewhere in the middle is Solaris 10,
          with OpenIndiana being a shift towards the "simple" group.
        </p>
        <p>
          Don't let yourself be scared away immediately by this.  For
          instance, a bootstrap on Solaris 10 may be quite flawless,
          because many went ahead of you, and ironed out a smooth path.
        </p>
        <p>
          In general, when bootstrapping, make sure you have a clean and
          lean environment.  Exclude any software providing repositories
          such as Blastwave, Fink, MacPorts, Homebrew, ports, etc. by
          default, e.g. make sure your shell doesn't automatically load
          any environment variables that setup those repositories.
          Think of <c>PATH</c>, <c>CFFLAGS</c>, <c>CFLAGS</c>,
          <c>LDFLAGS</c>, <c>PKG_CONFIG_PATH</c> and the always harmful
          <c>LD_LIBRARY_PATH</c>.
          This is important, because Prefix tends to be very sensitive
          about this.  Afterall, it's whole purpose is to provide all of
          those tools by itself without external help!
        </p>
        <p>
          If you happen to run into trouble, don't despair
          (immediately).  Feel free to ask in the <c>gentoo-prefix</c>
          IRC channel, or <uri
            link="http://archives.gentoo.org/gentoo-alt">gentoo-alt
            mailing list</uri>.
        </p>
        <note>
          IMPORTANT: Gentoo Prefix does NOT require root-privileges.
          You don't have to be root to bootstrap a Prefix installation.
          In fact, we <e>highly discourage</e> people to bootstrap as
          root-user!
        </note>
      </body>
    </section><!-- }}} -->

    <section><!-- {{{ Bootstrapping -->
      <title>Bootstrapping</title>
      <body>
        <p>
          As prerequisite, you have to have a working compiler, e.g.
          <c>gcc</c> and <c>make</c> installed.  Without a compiler,
          linker and all that is required by those to compile a program
          such as system headers and libraries, any Prefix bootstrap
          will fail almost immediately.
        </p>
        <note>
          On Mac OS X systems, the compiler, linker, system headers and
          libraries are provided by Xcode, or the Xcode command line
          tools, available through the AppStore and ADC respectively.
        </note>
        <note>
          On OpenIndiana, you need the a compiler, system headers and
          more installed using <c>pkg</c>.  Perform the following two
          commands as super user: <c>pkg set-publisher -p
            http://pkg.openindiana.org/sfe/</c> and <c>pkg install
            sfe/developer/gcc developer/library/lint system/header</c>.
          The compiler and many useful other utilities will be available
          in <c>/usr/gnu/bin</c>.
        </note>
        <note>
          On Solaris systems many useful utilities such as <c>wget</c>
          and <c>gcc</c> are located in <path>/usr/sfw/bin</path>.
        </note>
        <p>
          The first step is to choose a path to install into.  We refer
          to this path as "Prefix path", stored in the variable
          <c>EPREFIX</c>.  Some suggestion for your Prefix path is
          <path>$HOME/gentoo</path>.
          Whatever you chose, make sure you set it in your environment:
        </p>
        <pre caption="Export EPREFIX variable">
$ <i>export EPREFIX="$HOME/gentoo"</i>
        </pre>
        <note>
          tcsh users can use <c>setenv EPREFIX "$HOME/gentoo"</c>
          instead.
        </note>
        <p>
          Next, add the following paths in your soon to be Prefix to
          your <c>PATH</c> environment.
          <path>$EPREFIX/bin</path>,
          <path>$EPREFIX/usr/bin</path>,
          <path>$EPREFIX/tmp/bin</path> and
          <path>$EPREFIX/tmp/usr/bin</path>.
          Adding these paths makes sure that they will be available
          later on in the process.
        </p>
        <pre caption="Add Prefix and temp paths to your PATH">
$ <i>export PATH="$EPREFIX/usr/bin:$EPREFIX/bin:$EPREFIX/tmp/usr/bin:$EPREFIX/tmp/bin:/usr/bin:/bin"</i>
        </pre>
        <note>
          On Solaris you need the add the following paths to find
          the GNU compiler, linker, <c>make</c> and some other tools:
          <path>/usr/sfw/bin</path>,
          <path>/usr/sfw/&lt;arch&gt;-sun-solaris&lt;version&gt;/bin</path>.
          Use <c>export
            PATH="$PATH:/usr/sfw/bin:/usr/sfw/i386-sun-solaris2.10/bin"</c>
          for x86-based Solaris 10.  Similar for sparc-based Solaris 10,
          use <c>sparc-sun-solaris2.10</c> instead.  Solaris 11 users
          have to replace the <c>2.10</c> by <c>2.11</c>.
        </note>
        <note>
          Most notably on Mac OS X and Solaris systems, both 32-bits and
          64-bits modes are possible.  These are so-called multilib
          systems.  If you know what this means, and you don't like the
          default chosen by the bootstrap script, you can set your
          <c>CHOST</c> environment variable to your liking.

          Solaris/OpenSolaris/OpenIndiana systems always default to
          32-bits, so if you want to end up with a 64-bits native Prefix
          installation, then set your <c>CHOST</c> variable accordingly
          to either <c>x86_64-pc-solaris2.10</c> or
          <c>sparcv9-sun-solaris2.10</c> for Solaris 10, use <c>2.11</c>
          for versions later, including OpenIndiana.

          Mac OS X Intel-based systems before Lion (10.7) always default
          to 32-bits.  From Lion and on, the default is 64-bits.  If you
          want a 64-bits native Prefix on pre-Lion systems, set your
          <c>CHOST</c> to <c>x86_64-apple-darwin9</c> for Leopard, or
          <c>x86_64-apple-darwin10</c> for Snow Leopard.  If you want to
          end up with a 32-bits native Prefix installation on Lion, set
          your <c>CHOST</c> to <c>i686-apple-darwin11</c>. 
        </note>
        <p>
          Now the <c>PATH</c> is set, start with downloading the
          bootstrap script from
          <uri>http://overlays.gentoo.org/proj/alt/browser/trunk/prefix-overlay/scripts/bootstrap-prefix.sh?format=txt</uri>.
          This script needs bash.  If you don't have bash on your system
          (typically BSD users don't), you'll have to bootstrap bash
          first, using 
          <uri>http://overlays.gentoo.org/proj/alt/browser/trunk/prefix-overlay/scripts/bootstrap-bash.sh?format=txt</uri>.
          You can use <c>wget</c>, <c>curl</c> or <c>ftp</c> if they are
          available.  Downloading them with a web-browser is also fine.
        </p>
        <note>
          If your system lacks bash by default, bootstrap it, using:
          <c>chmod 755 bootstrap-bash.sh; ./bootstrap-bash.sh
            $EPREFIX/tmp</c> and rehash afterwards: <c>hash -r</c> (sh)
          or <c>rehash</c> (csh).
        </note>
        <p>
          From the directory where the bootstrap script was stored execute
          the following commands:
        </p>
        <pre caption="Use the bootstrap script for stage1">
$ <i>chmod 755 bootstrap-prefix.sh</i>
$ <i>./bootstrap-prefix.sh $EPREFIX/tmp stage1</i>
        </pre>
        <note>
          Please note the usage of <path>$EPREFIX/tmp</path>!
        </note>
        <p>
          The stage1 should have installed some basic packages
          necessary to run Portage, without Portage's help.  When stage1
          finished successfully, a Portage can be installed.
        </p>
        <p>
          The Portage tree installed by default is a known to be good
          snapshot.  This can, however, for various reasons not be
          good enough, in which case the lastest snapshot available can
          be used instead.  Only use this when you have problems with
          the known to be good snapshot.  If you want to use the lastest
          snapshot when bootstrapping, export LATEST_TREE_YES=1 in
          your environment before running the following:
        </p>
        <pre caption="bootstrap Portage and its tree">
$ <i>./bootstrap-prefix.sh $EPREFIX stage2</i>
        </pre>
        <p>
          We continue with emerging some of the core toolchain packages
          that make sure we compile and link everything taking the
          Prefix into account.  Next to that this step emerges the full
          set of applications and that Portage needs and removes the
          tools installed by stage1.  It finishes things by getting an
          up-to-date tree (removing any hacks stage2 applied to the
          activated profile) and emerging everything in the
          <c>system</c> set.
        </p>
        <pre caption="bootstrap a self-hosted Portage">
$ <i>./bootstrap-prefix.sh $EPREFIX stage3</i>
        </pre>
        <p>
          Because we installed some new applications, most notably
          Portage, we will instruct bash to reconsider all paths we
          have:
        </p>
        <pre caption="rehash in bash">
$ <i>hash -r</i>
        </pre>
        <note>
          tcsh users can use the <c>rehash</c> command.
        </note>
        <p>
          Now is a good time to set the preferences for your Prefix.
          This includes customisations such as general <c>USE</c>-flags,
          <c>CFLAGS</c> and <c>MAKEOPTS</c> in
          <path>$EPREFIX/etc/portage/make.conf</path>.  Be conservative with
          <c>CFLAGS</c>!  The stage3 function already set some moderate
          defaults.
        </p>
        <note>
          You can consider adding CPU-specific tuning flags to
          <c>CFLAGS</c>.  If you don't know what your CPU is, or what
          this would be good for, just skip this note.

          Intel-based Mac OS X users (e.g. MacBook, CoreDuo) should at
          least have <c>-march=prescott</c> here to avoid compilation
          errors due to SSE instructions not being enabled.  Core2Duo
          users can use <c>-march=core2</c>.  Mac OS X PPC users can use
          their CPU's alias to enable CPU specific tuning, e.g.
          <c>-mcpu=G5 -mtune=G5</c>.
          
          For other systems, you might simply want to use
          <c>-march=&lt;your-cpu&gt;</c>.  Google the right value, or
          just forget about this setting.  Note that setting a wrong
          value breaks things.
        </note>
        <p>
          Since we have everything in place for a self-catered rebuild,
          we can start the final stage to install the Prefix system.
          This final stage recompiles everything in the system, but now
          all packages can be compiled with tools from the Prefix,
          instead of those from the host system.
        </p>
        <pre caption="doing the final system installation">
$ <i>emerge -e system</i>
        </pre>
        <p>
          After <c>system</c> has emerged successfully, your Prefix will
          be set up properly, and you can emerge the whichever tools you
          choose from the Prefix tree.
        </p>
      </body>
    </section><!-- }}} -->

    <section><!-- {{{ Using the Prefix -->
      <title>Using the Prefix</title>
      <body>
        <p>
          To use your bootstrapped Prefix environment, you best start a
          shell from the Prefix, such that your path and other
          environment variables are set correctly.  To facilitate in
          this, a small helper script can be created by the bootstrap
          script.
        </p>
        <pre caption="Creating a start-script">
$ <i>cd $EPREFIX/usr/portage/scripts</i>
$ <i>./bootstrap-prefix.sh $EPREFIX startscript</i>
        </pre>
        <p>
          After running this, a script <c>startprefix</c> will be
          present in <c>$EPREFIX</c>.  You can freely move the script to
          e.g. your homedir for convenience.  Running the script will
          drop you into a Prefix shell, where for example <c>emerge</c>
          is directly at your disposal.  Enjoy your Prefix!
        </p>
      </body>
    </section>

  </chapter>

</guide>

<!-- vim: set expandtab ts=2 sw=2 foldmethod=marker foldenable spell spelllang=en_gb: -->
<!-- kate: space-indent on; indent-width 2; replace-tabs on; -->
